error[E0428]: the name `tether_reactivation_window_system` is defined multiple times
   --> src\weapon_systems.rs:502:1
    |
463 | / pub fn tether_reactivation_window_system(
464 | |     mut commands: Commands,
465 | |     time: Res<Time>,
466 | |     mut query: Query<(Entity, &mut PlayerWaitingTetherActivationComponent)>,
...   |
477 | | }
    | |_- previous definition of the value `tether_reactivation_window_system` here
...
502 | / pub fn tether_reactivation_window_system(
503 | |     mut commands: Commands,
504 | |     time: Res<Time>,
505 | |     mut query: Query<(Entity, &mut PlayerWaitingTetherActivationComponent)>,
...   |
516 | | }
    | |_^ `tether_reactivation_window_system` redefined here
    |
    = note: `tether_reactivation_window_system` must be defined only once in the value namespace of this module

error[E0428]: the name `LobbedCloudProjectile` is defined multiple times
   --> src\components.rs:142:1
    |
114 | pub struct LobbedCloudProjectile {
    | -------------------------------- previous definition of the type `LobbedCloudProjectile` here
...
142 | pub struct LobbedCloudProjectile {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `LobbedCloudProjectile` redefined here
    |
    = note: `LobbedCloudProjectile` must be defined only once in the type namespace of this module

error[E0428]: the name `PersistentAoECloud` is defined multiple times
   --> src\components.rs:150:1
    |
122 | pub struct PersistentAoECloud {
    | ----------------------------- previous definition of the type `PersistentAoECloud` here
...
150 | pub struct PersistentAoECloud {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `PersistentAoECloud` redefined here
    |
    = note: `PersistentAoECloud` must be defined only once in the type namespace of this module

error[E0428]: the name `ActiveDebuff` is defined multiple times
   --> src\components.rs:160:1
    |
132 | pub struct ActiveDebuff {
    | ----------------------- previous definition of the type `ActiveDebuff` here
...
160 | pub struct ActiveDebuff {
    | ^^^^^^^^^^^^^^^^^^^^^^^ `ActiveDebuff` redefined here
    |
    = note: `ActiveDebuff` must be defined only once in the type namespace of this module

error[E0432]: unresolved import `crate::visual_effects::spawn_damage_text`
 --> src\automatic_projectiles.rs:6:5
  |
6 |     visual_effects::spawn_damage_text,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `spawn_damage_text` in `visual_effects`

error[E0432]: unresolved import `crate::visual_effects::spawn_damage_text`
 --> src\weapons.rs:9:22
  |
9 |     visual_effects::{spawn_damage_text}, // Removed ImpactEffectRequest, spawn_impact_effect
  |                      ^^^^^^^^^^^^^^^^^ no `spawn_damage_text` in `visual_effects`

error[E0432]: unresolved imports `crate::items::StandardProjectileParams`, `crate::items::ReturningProjectileParams`, `crate::items::ChanneledBeamParams`, `crate::items::ConeAttackParams`
 --> src\visual_effects.rs:4:20
  |
4 | ...tems::{StandardProjectileParams, ReturningProjectileParams, ChanneledBeamParams, ConeAttackParams, AutomaticW...
  |           ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ConeAttackParams` in `items`
  |           |                         |                          |
  |           |                         |                          no `ChanneledBeamParams` in `items`
  |           |                         no `ReturningProjectileParams` in `items`
  |           no `StandardProjectileParams` in `items`
  |
help: a similar name exists in the module
  |
4 - use crate::items::{StandardProjectileParams, ReturningProjectileParams, ChanneledBeamParams, ConeAttackParams, AutomaticWeaponId};
4 + use crate::items::{BouncingProjectileParams, ReturningProjectileParams, ChanneledBeamParams, ConeAttackParams, AutomaticWeaponId};
  |
help: a similar name exists in the module
  |
4 - use crate::items::{StandardProjectileParams, ReturningProjectileParams, ChanneledBeamParams, ConeAttackParams, AutomaticWeaponId};
4 + use crate::items::{StandardProjectileParams, BouncingProjectileParams, ChanneledBeamParams, ConeAttackParams, AutomaticWeaponId};
  |
help: a similar name exists in the module
  |
4 - use crate::items::{StandardProjectileParams, ReturningProjectileParams, ChanneledBeamParams, ConeAttackParams, AutomaticWeaponId};
4 + use crate::items::{StandardProjectileParams, ReturningProjectileParams, ChanneledBeamParams, DashAttackParams, AutomaticWeaponId};
  |

error[E0432]: unresolved import `crate::visual_effects::spawn_damage_text`
 --> src\skills.rs:9:5
  |
9 |     visual_effects::spawn_damage_text,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `spawn_damage_text` in `visual_effects`

error[E0432]: unresolved import `crate::visual_effects::spawn_damage_text`
 --> src\items.rs:8:5
  |
8 |     visual_effects::spawn_damage_text,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `spawn_damage_text` in `visual_effects`

error[E0432]: unresolved imports `crate::items::StandardProjectileParams`, `crate::items::ReturningProjectileParams`, `crate::items::ChanneledBeamParams`, `crate::items::ConeAttackParams`
 --> src\weapon_systems.rs:4:20
  |
4 | ...tems::{StandardProjectileParams, ReturningProjectileParams, ChanneledBeamParams, ConeAttackParams, AutomaticW...
  |           ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `ConeAttackParams` in `items`
  |           |                         |                          |
  |           |                         |                          no `ChanneledBeamParams` in `items`
  |           |                         no `ReturningProjectileParams` in `items`
  |           no `StandardProjectileParams` in `items`
  |
help: a similar name exists in the module
  |
4 - use crate::items::{StandardProjectileParams, ReturningProjectileParams, ChanneledBeamParams, ConeAttackParams, AutomaticWeaponId};
4 + use crate::items::{BouncingProjectileParams, ReturningProjectileParams, ChanneledBeamParams, ConeAttackParams, AutomaticWeaponId};
  |
help: a similar name exists in the module
  |
4 - use crate::items::{StandardProjectileParams, ReturningProjectileParams, ChanneledBeamParams, ConeAttackParams, AutomaticWeaponId};
4 + use crate::items::{StandardProjectileParams, BouncingProjectileParams, ChanneledBeamParams, ConeAttackParams, AutomaticWeaponId};
  |
help: a similar name exists in the module
  |
4 - use crate::items::{StandardProjectileParams, ReturningProjectileParams, ChanneledBeamParams, ConeAttackParams, AutomaticWeaponId};
4 + use crate::items::{StandardProjectileParams, ReturningProjectileParams, ChanneledBeamParams, DashAttackParams, AutomaticWeaponId};
  |

error[E0432]: unresolved import `crate::components::RootedComponent`
 --> src\weapon_systems.rs:5:61
  |
5 | use crate::components::{Velocity, Damage, Lifetime, Health, RootedComponent};
  |                                                             ^^^^^^^^^^^^^^^
  |                                                             |
  |                                                             no `RootedComponent` in `components`
  |                                                             help: a similar name exists in the module: `RemovedComponents`

error[E0432]: unresolved import `visual_effects::VisualEffectsPlugin`
  --> src\main.rs:30:5
   |
30 | use visual_effects::VisualEffectsPlugin;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `VisualEffectsPlugin` in `visual_effects`

error[E0433]: failed to resolve: could not find `player` in the crate root
   --> src\weapon_systems.rs:728:54
    |
728 |     player_query: Query<(Entity, &Transform, &crate::player::Player, &crate::player::MindAffliction)>,
    |                                                      ^^^^^^ could not find `player` in the crate root

error[E0433]: failed to resolve: could not find `player` in the crate root
   --> src\weapon_systems.rs:728:78
    |
728 |     player_query: Query<(Entity, &Transform, &crate::player::Player, &crate::player::MindAffliction)>,
    |                                                                              ^^^^^^ could not find `player` in the crate root

error[E0412]: cannot find type `DeployableOrbitingTurretParams` in module `crate::items`
  --> src\components.rs:41:40
   |
41 |     pub params_snapshot: crate::items::DeployableOrbitingTurretParams, // Cloned params for this instance
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `BlinkStrikeParams` in module `crate::items`
   --> src\components.rs:107:37
    |
107 |     pub blink_params: crate::items::BlinkStrikeParams, // Contains all details like distance, target type
    |                                     ^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `LobbedAoECloudParams` in module `crate::items`
   --> src\components.rs:115:31
    |
115 |     pub params: crate::items::LobbedAoECloudParams,
    |                               ^^^^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `LobbedAoECloudParams` in module `crate::items`
   --> src\components.rs:123:31
    |
123 |     pub params: crate::items::LobbedAoECloudParams,
    |                               ^^^^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `DebuffType` in module `crate::items`
   --> src\components.rs:133:36
    |
133 |     pub debuff_type: crate::items::DebuffType,
    |                                    ^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `LobbedAoECloudParams` in module `crate::items`
   --> src\components.rs:143:31
    |
143 |     pub params: crate::items::LobbedAoECloudParams,
    |                               ^^^^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `LobbedAoECloudParams` in module `crate::items`
   --> src\components.rs:151:31
    |
151 |     pub params: crate::items::LobbedAoECloudParams,
    |                               ^^^^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `DebuffType` in module `crate::items`
   --> src\components.rs:161:36
    |
161 |     pub debuff_type: crate::items::DebuffType,
    |                                    ^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `DamageAmpDebuffComponent` in module `crate::components`
   --> src\automatic_projectiles.rs:183:40
    |
183 |         Option<&mut crate::components::DamageAmpDebuffComponent>,
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^ not found in `crate::components`

error[E0412]: cannot find type `Horror` in this scope
   --> src\automatic_projectiles.rs:189:104
    |
189 | ... &Survivor), (With<Survivor>, Without<Horror>, Without<AutomaticProjectile>)>,
    |                                          ^^^^^^ not found in this scope
    |
help: consider importing this struct
    |
2   + use crate::horror::Horror;
    |

error[E0422]: cannot find struct, variant or union type `DamageAmpDebuffComponent` in module `crate::components`
   --> src\automatic_projectiles.rs:386:98
    |
386 | ...                   commands.entity(horror_entity).insert(crate::components::DamageAmpDebuffComponent {
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^ not found in `crate::components`

error[E0412]: cannot find type `LobbedAoEPoolParams` in module `crate::items`
  --> src\visual_effects.rs:64:36
   |
64 |     pub pool_params: crate::items::LobbedAoEPoolParams, // To know what kind of pool to spawn.
   |                                    ^^^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `TrailOfFireParams` in module `crate::items`
   --> src\visual_effects.rs:107:37
    |
107 |     pub trail_params: crate::items::TrailOfFireParams,
    |                                     ^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0425]: cannot find function `spawn_damage_text` in module `crate::visual_effects`
   --> src\visual_effects.rs:515:36
    |
515 | ...   crate::visual_effects::spawn_damage_text(commands, asset_server, horror_gtransform.translation(), damage...
    |                              ^^^^^^^^^^^^^^^^^ not found in `crate::visual_effects`

error[E0422]: cannot find struct, variant or union type `AccuracyDebuffComponent` in module `crate::components`
   --> src\visual_effects.rs:672:48
    |
672 | ...                   crate::components::AccuracyDebuffComponent {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^ not found in `crate::components`

error[E0422]: cannot find struct, variant or union type `AttackSpeedDebuffComponent` in module `crate::components`
   --> src\visual_effects.rs:680:48
    |
680 | ...                   crate::components::AttackSpeedDebuffComponent {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `crate::components`

error[E0422]: cannot find struct, variant or union type `ContinuousDamageComponent` in module `crate::components`
   --> src\visual_effects.rs:688:48
    |
688 | ...                   crate::components::ContinuousDamageComponent {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `crate::components`

error[E0425]: cannot find function `spawn_damage_text` in module `crate::visual_effects`
   --> src\visual_effects.rs:808:52
    |
808 | ...                   crate::visual_effects::spawn_damage_text(
    |                                              ^^^^^^^^^^^^^^^^^ not found in `crate::visual_effects`

error[E0425]: cannot find function `spawn_damage_text` in module `crate::visual_effects`
   --> src\visual_effects.rs:880:36
    |
880 |             crate::visual_effects::spawn_damage_text(commands, asset_server, horror_pos, params.damage, time);
    |                                    ^^^^^^^^^^^^^^^^^ not found in `crate::visual_effects`

error[E0425]: cannot find function `spawn_damage_text` in module `crate::visual_effects`
   --> src\visual_effects.rs:985:40
    |
985 | ...   crate::visual_effects::spawn_damage_text(commands, asset_server, target_pos, damage_to_apply, time);
    |                              ^^^^^^^^^^^^^^^^^ not found in `crate::visual_effects`

error[E0412]: cannot find type `TrailOfFireParams` in module `crate::items`
    --> src\visual_effects.rs:1045:28
     |
1045 |     params: &crate::items::TrailOfFireParams,
     |                            ^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `TrailOfFireParams` in module `crate::items`
    --> src\visual_effects.rs:1100:34
     |
1100 |     trail_params: &crate::items::TrailOfFireParams,
     |                                  ^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `ChargeUpEnergyShotParams` in module `crate::items`
    --> src\visual_effects.rs:1172:35
     |
1172 |     charge_params: &crate::items::ChargeUpEnergyShotParams, // Overall charge weapon params
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `ChargeLevelParams` in module `crate::items`
    --> src\visual_effects.rs:1173:41
     |
1173 |     chosen_level_params: &crate::items::ChargeLevelParams, // Params for the specific charge level achieved
     |                                         ^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `LobbedAoEPoolParams` in module `crate::items`
    --> src\visual_effects.rs:1258:28
     |
1258 |     params: &crate::items::LobbedAoEPoolParams,
     |                            ^^^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `LobbedAoEPoolParams` in module `crate::items`
    --> src\visual_effects.rs:1327:33
     |
1327 |     pool_params: &crate::items::LobbedAoEPoolParams,
     |                                 ^^^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `StandardProjectileParams` in this scope
   --> src\items.rs:400:24
    |
224 | pub struct BouncingProjectileParams {
    | ----------------------------------- similarly named struct `BouncingProjectileParams` defined here
...
400 |     StandardProjectile(StandardProjectileParams),
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `BouncingProjectileParams`

error[E0412]: cannot find type `ReturningProjectileParams` in this scope
   --> src\items.rs:401:25
    |
224 | pub struct BouncingProjectileParams {
    | ----------------------------------- similarly named struct `BouncingProjectileParams` defined here
...
401 |     ReturningProjectile(ReturningProjectileParams),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `BouncingProjectileParams`

error[E0412]: cannot find type `ChanneledBeamParams` in this scope
   --> src\items.rs:402:19
    |
402 |     ChanneledBeam(ChanneledBeamParams),
    |                   ^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `ConeAttackParams` in this scope
   --> src\items.rs:403:16
    |
183 | pub struct DashAttackParams {
    | --------------------------- similarly named struct `DashAttackParams` defined here
...
403 |     ConeAttack(ConeAttackParams),
    |                ^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `DashAttackParams`

error[E0412]: cannot find type `LobbedAoEPoolParams` in this scope
   --> src\items.rs:404:19
    |
404 |     LobbedAoEPool(LobbedAoEPoolParams),
    |                   ^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `ChargeUpEnergyShotParams` in this scope
   --> src\items.rs:405:24
    |
405 |     ChargeUpEnergyShot(ChargeUpEnergyShotParams),
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `TrailOfFireParams` in this scope
   --> src\items.rs:406:17
    |
406 |     TrailOfFire(TrailOfFireParams),
    |                 ^^^^^^^^^^^^^^^^^ not found in this scope

error[E0412]: cannot find type `StandardProjectileParams` in this scope
   --> src\items.rs:603:30
    |
224 | pub struct BouncingProjectileParams {
    | ----------------------------------- similarly named struct `BouncingProjectileParams` defined here
...
603 |             .register_type::<StandardProjectileParams>() .register_type::<ReturningProjectileParams>() .regist...
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: a struct with a similar name exists
    |
603 -             .register_type::<StandardProjectileParams>() .register_type::<ReturningProjectileParams>() .register_type::<ChanneledBeamParams>() .register_type::<ConeAttackParams>() .register_type::<LobbedAoEPoolParams>()
603 +             .register_type::<BouncingProjectileParams>() .register_type::<ReturningProjectileParams>() .register_type::<ChanneledBeamParams>() .register_type::<ConeAttackParams>() .register_type::<LobbedAoEPoolParams>()
    |
help: you might be missing a type parameter
    |
598 | impl<StandardProjectileParams> Plugin for ItemsPlugin {
    |     ++++++++++++++++++++++++++

error[E0412]: cannot find type `ReturningProjectileParams` in this scope
   --> src\items.rs:603:75
    |
224 | pub struct BouncingProjectileParams {
    | ----------------------------------- similarly named struct `BouncingProjectileParams` defined here
...
603 |             .register_type::<StandardProjectileParams>() .register_type::<ReturningProjectileParams>() .regist...
    |                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: a struct with a similar name exists
    |
603 -             .register_type::<StandardProjectileParams>() .register_type::<ReturningProjectileParams>() .register_type::<ChanneledBeamParams>() .register_type::<ConeAttackParams>() .register_type::<LobbedAoEPoolParams>()
603 +             .register_type::<StandardProjectileParams>() .register_type::<BouncingProjectileParams>() .register_type::<ChanneledBeamParams>() .register_type::<ConeAttackParams>() .register_type::<LobbedAoEPoolParams>()
    |
help: you might be missing a type parameter
    |
598 | impl<ReturningProjectileParams> Plugin for ItemsPlugin {
    |     +++++++++++++++++++++++++++

error[E0412]: cannot find type `ChanneledBeamParams` in this scope
   --> src\items.rs:603:121
    |
603 | ...ctileParams>() .register_type::<ChanneledBeamParams>() .register_type::<ConeAttackParams>() .register_type:...
    |                                    ^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
598 | impl<ChanneledBeamParams> Plugin for ItemsPlugin {
    |     +++++++++++++++++++++

error[E0412]: cannot find type `ConeAttackParams` in this scope
   --> src\items.rs:603:161
    |
183 | pub struct DashAttackParams {
    | --------------------------- similarly named struct `DashAttackParams` defined here
...
603 |             .register_type::<StandardProjectileParams>() .register_type::<ReturningProjectileParams>() .register_type::<ChanneledBeamParams>() .register_type::<ConeAttackParams>()...
    |                                                                                                                                                                 ^^^^^^^^^^^^^^^^
    |
help: a struct with a similar name exists
    |
603 -             .register_type::<StandardProjectileParams>() .register_type::<ReturningProjectileParams>() .register_type::<ChanneledBeamParams>() .register_type::<ConeAttackParams>() .register_type::<LobbedAoEPoolParams>()
603 +             .register_type::<StandardProjectileParams>() .register_type::<ReturningProjectileParams>() .register_type::<ChanneledBeamParams>() .register_type::<DashAttackParams>() .register_type::<LobbedAoEPoolParams>()
    |
help: you might be missing a type parameter
    |
598 | impl<ConeAttackParams> Plugin for ItemsPlugin {
    |     ++++++++++++++++++

error[E0412]: cannot find type `LobbedAoEPoolParams` in this scope
   --> src\items.rs:603:198
    |
603 | ...ttackParams>() .register_type::<LobbedAoEPoolParams>()
    |                                    ^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
598 | impl<LobbedAoEPoolParams> Plugin for ItemsPlugin {
    |     +++++++++++++++++++++

error[E0412]: cannot find type `ChargeLevelParams` in this scope
   --> src\items.rs:604:30
    |
604 |             .register_type::<ChargeLevelParams>() .register_type::<ChargeUpEnergyShotParams>()
    |                              ^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
598 | impl<ChargeLevelParams> Plugin for ItemsPlugin {
    |     +++++++++++++++++++

error[E0412]: cannot find type `ChargeUpEnergyShotParams` in this scope
   --> src\items.rs:604:68
    |
604 |             .register_type::<ChargeLevelParams>() .register_type::<ChargeUpEnergyShotParams>()
    |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
598 | impl<ChargeUpEnergyShotParams> Plugin for ItemsPlugin {
    |     ++++++++++++++++++++++++++

error[E0412]: cannot find type `TrailOfFireParams` in this scope
   --> src\items.rs:605:30
    |
605 |             .register_type::<TrailOfFireParams>()
    |                              ^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: you might be missing a type parameter
    |
598 | impl<TrailOfFireParams> Plugin for ItemsPlugin {
    |     +++++++++++++++++++

error[E0422]: cannot find struct, variant or union type `LobbedAoEPoolParams` in this scope
   --> src\items.rs:639:52
    |
639 |         attack_data: AttackTypeData::LobbedAoEPool(LobbedAoEPoolParams {
    |                                                    ^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `ChanneledBeamParams` in this scope
   --> src\items.rs:659:52
    |
659 |         attack_data: AttackTypeData::ChanneledBeam(ChanneledBeamParams {
    |                                                    ^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `ChargeUpEnergyShotParams` in this scope
   --> src\items.rs:672:57
    |
672 |         attack_data: AttackTypeData::ChargeUpEnergyShot(ChargeUpEnergyShotParams {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `ChargeLevelParams` in this scope
   --> src\items.rs:678:17
    |
678 |                 ChargeLevelParams { // Tap Fire
    |                 ^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `ChargeLevelParams` in this scope
   --> src\items.rs:689:17
    |
689 |                 ChargeLevelParams { // Partial Charge
    |                 ^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `ChargeLevelParams` in this scope
   --> src\items.rs:700:17
    |
700 |                 ChargeLevelParams { // Full Charge
    |                 ^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `ReturningProjectileParams` in this scope
   --> src\items.rs:718:58
    |
224 | pub struct BouncingProjectileParams {
    | ----------------------------------- similarly named struct `BouncingProjectileParams` defined here
...
718 |         attack_data: AttackTypeData::ReturningProjectile(ReturningProjectileParams {
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `BouncingProjectileParams`

error[E0422]: cannot find struct, variant or union type `TrailOfFireParams` in this scope
   --> src\items.rs:733:50
    |
733 |         attack_data: AttackTypeData::TrailOfFire(TrailOfFireParams {
    |                                                  ^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `ChanneledBeamParams` in this scope
   --> src\items.rs:769:52
    |
769 |         attack_data: AttackTypeData::ChanneledBeam(ChanneledBeamParams {
    |                                                    ^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `LobbedAoEPoolParams` in this scope
   --> src\items.rs:828:52
    |
828 |         attack_data: AttackTypeData::LobbedAoEPool(LobbedAoEPoolParams {
    |                                                    ^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0422]: cannot find struct, variant or union type `ConeAttackParams` in this scope
   --> src\items.rs:880:49
    |
183 | pub struct DashAttackParams {
    | --------------------------- similarly named struct `DashAttackParams` defined here
...
880 |         attack_data: AttackTypeData::ConeAttack(ConeAttackParams {
    |                                                 ^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `DashAttackParams`

error[E0422]: cannot find struct, variant or union type `ConeAttackParams` in this scope
   --> src\items.rs:932:49
    |
183 | pub struct DashAttackParams {
    | --------------------------- similarly named struct `DashAttackParams` defined here
...
932 |         attack_data: AttackTypeData::ConeAttack(ConeAttackParams {
    |                                                 ^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `DashAttackParams`

error[E0412]: cannot find type `LobbedAoEPoolParams` in module `crate::items`
  --> src\weapon_systems.rs:61:36
   |
61 |     pub pool_params: crate::items::LobbedAoEPoolParams,
   |                                    ^^^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `TrailOfFireParams` in module `crate::items`
   --> src\weapon_systems.rs:104:37
    |
104 |     pub trail_params: crate::items::TrailOfFireParams,
    |                                     ^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0425]: cannot find function `spawn_damage_text` in module `crate::visual_effects`
   --> src\weapon_systems.rs:935:56
    |
935 | ...   crate::visual_effects::spawn_damage_text(&mut commands, &asset_server, horror_gtransform.translation(), ...
    |                              ^^^^^^^^^^^^^^^^^ not found in `crate::visual_effects`

error[E0425]: cannot find function `spawn_damage_text` in module `crate::visual_effects`
    --> src\weapon_systems.rs:1182:44
     |
1182 | ...   crate::visual_effects::spawn_damage_text(&mut commands, &asset_server, horror_transform.translation, po...
     |                              ^^^^^^^^^^^^^^^^^ not found in `crate::visual_effects`

error[E0425]: cannot find function `spawn_damage_text` in module `crate::visual_effects`
    --> src\weapon_systems.rs:1264:40
     |
1264 | ...   crate::visual_effects::spawn_damage_text(&mut commands, &asset_server, horror_gtransform.translation(),...
     |                              ^^^^^^^^^^^^^^^^^ not found in `crate::visual_effects`

error[E0425]: cannot find function `spawn_damage_text` in module `crate::visual_effects`
    --> src\weapon_systems.rs:1432:44
     |
1432 | ...   crate::visual_effects::spawn_damage_text(&mut commands, &asset_server, horror_gtransform.translation(),...
     |                              ^^^^^^^^^^^^^^^^^ not found in `crate::visual_effects`

error[E0425]: cannot find function `spawn_damage_text` in module `crate::visual_effects`
    --> src\weapon_systems.rs:1715:36
     |
1715 | ...   crate::visual_effects::spawn_damage_text(commands, asset_server, horror_gtransform.translation(), damag...
     |                              ^^^^^^^^^^^^^^^^^ not found in `crate::visual_effects`

error[E0422]: cannot find struct, variant or union type `AccuracyDebuffComponent` in module `crate::components`
    --> src\weapon_systems.rs:1842:48
     |
1842 | ...                   crate::components::AccuracyDebuffComponent {
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^ not found in `crate::components`

error[E0422]: cannot find struct, variant or union type `AttackSpeedDebuffComponent` in module `crate::components`
    --> src\weapon_systems.rs:1850:48
     |
1850 | ...                   crate::components::AttackSpeedDebuffComponent {
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `crate::components`

error[E0422]: cannot find struct, variant or union type `ContinuousDamageComponent` in module `crate::components`
    --> src\weapon_systems.rs:1858:48
     |
1858 | ...                   crate::components::ContinuousDamageComponent {
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `crate::components`

error[E0425]: cannot find function `spawn_damage_text` in module `crate::visual_effects`
    --> src\weapon_systems.rs:1968:52
     |
1968 | ...                   crate::visual_effects::spawn_damage_text(
     |                                              ^^^^^^^^^^^^^^^^^ not found in `crate::visual_effects`

error[E0425]: cannot find function `spawn_damage_text` in module `crate::visual_effects`
    --> src\weapon_systems.rs:2030:36
     |
2030 |             crate::visual_effects::spawn_damage_text(commands, asset_server, horror_pos, params.damage, time);
     |                                    ^^^^^^^^^^^^^^^^^ not found in `crate::visual_effects`

error[E0425]: cannot find function `spawn_damage_text` in module `crate::visual_effects`
    --> src\weapon_systems.rs:2123:40
     |
2123 | ...   crate::visual_effects::spawn_damage_text(commands, asset_server, target_pos, damage_to_apply, time);
     |                              ^^^^^^^^^^^^^^^^^ not found in `crate::visual_effects`

error[E0412]: cannot find type `TrailOfFireParams` in module `crate::items`
    --> src\weapon_systems.rs:2179:28
     |
2179 |     params: &crate::items::TrailOfFireParams,
     |                            ^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `TrailOfFireParams` in module `crate::items`
    --> src\weapon_systems.rs:2234:34
     |
2234 |     trail_params: &crate::items::TrailOfFireParams,
     |                                  ^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `ChargeUpEnergyShotParams` in module `crate::items`
    --> src\weapon_systems.rs:2297:35
     |
2297 |     charge_params: &crate::items::ChargeUpEnergyShotParams,
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `ChargeLevelParams` in module `crate::items`
    --> src\weapon_systems.rs:2298:41
     |
2298 |     chosen_level_params: &crate::items::ChargeLevelParams,
     |                                         ^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `LobbedAoEPoolParams` in module `crate::items`
    --> src\weapon_systems.rs:2370:28
     |
2370 |     params: &crate::items::LobbedAoEPoolParams,
     |                            ^^^^^^^^^^^^^^^^^^^ not found in `crate::items`

error[E0412]: cannot find type `LobbedAoEPoolParams` in module `crate::items`
    --> src\weapon_systems.rs:2429:33
     |
2429 |     pool_params: &crate::items::LobbedAoEPoolParams,
     |                                 ^^^^^^^^^^^^^^^^^^^ not found in `crate::items`

warning: unused imports: `horror::HorrorProjectile` and `skills::SkillProjectile`
 --> src\automatic_projectiles.rs:8:5
  |
8 |     skills::SkillProjectile,
  |     ^^^^^^^^^^^^^^^^^^^^^^^
9 |     horror::HorrorProjectile,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

error[E0119]: conflicting implementations of trait `bevy::prelude::Component` for type `components::LobbedCloudProjectile`
   --> src\components.rs:140:10
    |
112 | #[derive(Component, Debug, Reflect)]
    |          --------- first implementation here
...
140 | #[derive(Component, Debug, Reflect)]
    |          ^^^^^^^^^ conflicting implementation for `components::LobbedCloudProjectile`
    |
    = note: this error originates in the derive macro `Component` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `bevy::prelude::Component` for type `components::PersistentAoECloud`
   --> src\components.rs:148:10
    |
120 | #[derive(Component, Debug, Reflect)]
    |          --------- first implementation here
...
148 | #[derive(Component, Debug, Reflect)]
    |          ^^^^^^^^^ conflicting implementation for `components::PersistentAoECloud`
    |
    = note: this error originates in the derive macro `Component` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `bevy::prelude::Component` for type `components::ActiveDebuff`
   --> src\components.rs:158:10
    |
130 | #[derive(Component, Debug, Reflect)]
    |          --------- first implementation here
...
158 | #[derive(Component, Debug, Reflect)]
    |          ^^^^^^^^^ conflicting implementation for `components::ActiveDebuff`
    |
    = note: this error originates in the derive macro `Component` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `Debug` for type `components::LobbedCloudProjectile`
   --> src\components.rs:140:21
    |
112 | #[derive(Component, Debug, Reflect)]
    |                     ----- first implementation here
...
140 | #[derive(Component, Debug, Reflect)]
    |                     ^^^^^ conflicting implementation for `components::LobbedCloudProjectile`

error[E0119]: conflicting implementations of trait `Debug` for type `components::PersistentAoECloud`
   --> src\components.rs:148:21
    |
120 | #[derive(Component, Debug, Reflect)]
    |                     ----- first implementation here
...
148 | #[derive(Component, Debug, Reflect)]
    |                     ^^^^^ conflicting implementation for `components::PersistentAoECloud`

error[E0119]: conflicting implementations of trait `Debug` for type `components::ActiveDebuff`
   --> src\components.rs:158:21
    |
130 | #[derive(Component, Debug, Reflect)]
    |                     ----- first implementation here
...
158 | #[derive(Component, Debug, Reflect)]
    |                     ^^^^^ conflicting implementation for `components::ActiveDebuff`

error[E0119]: conflicting implementations of trait `GetTypeRegistration` for type `components::LobbedCloudProjectile`
   --> src\components.rs:140:28
    |
112 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
140 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::LobbedCloudProjectile`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `GetTypeRegistration` for type `components::PersistentAoECloud`
   --> src\components.rs:148:28
    |
120 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
148 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::PersistentAoECloud`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `GetTypeRegistration` for type `components::ActiveDebuff`
   --> src\components.rs:158:28
    |
130 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
158 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::ActiveDebuff`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `Typed` for type `components::LobbedCloudProjectile`
   --> src\components.rs:140:28
    |
112 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
140 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::LobbedCloudProjectile`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `Typed` for type `components::PersistentAoECloud`
   --> src\components.rs:148:28
    |
120 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
148 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::PersistentAoECloud`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `Typed` for type `components::ActiveDebuff`
   --> src\components.rs:158:28
    |
130 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
158 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::ActiveDebuff`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `TypePath` for type `components::LobbedCloudProjectile`
   --> src\components.rs:140:28
    |
112 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
140 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::LobbedCloudProjectile`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `TypePath` for type `components::PersistentAoECloud`
   --> src\components.rs:148:28
    |
120 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
148 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::PersistentAoECloud`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `TypePath` for type `components::ActiveDebuff`
   --> src\components.rs:158:28
    |
130 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
158 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::ActiveDebuff`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `bevy::prelude::Struct` for type `components::LobbedCloudProjectile`
   --> src\components.rs:140:28
    |
112 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
140 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::LobbedCloudProjectile`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `bevy::prelude::Struct` for type `components::PersistentAoECloud`
   --> src\components.rs:148:28
    |
120 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
148 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::PersistentAoECloud`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `bevy::prelude::Struct` for type `components::ActiveDebuff`
   --> src\components.rs:158:28
    |
130 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
158 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::ActiveDebuff`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `bevy::prelude::Reflect` for type `components::LobbedCloudProjectile`
   --> src\components.rs:140:28
    |
112 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
140 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::LobbedCloudProjectile`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `bevy::prelude::Reflect` for type `components::PersistentAoECloud`
   --> src\components.rs:148:28
    |
120 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
148 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::PersistentAoECloud`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `bevy::prelude::Reflect` for type `components::ActiveDebuff`
   --> src\components.rs:158:28
    |
130 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
158 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::ActiveDebuff`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `FromReflect` for type `components::LobbedCloudProjectile`
   --> src\components.rs:140:28
    |
112 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
140 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::LobbedCloudProjectile`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `FromReflect` for type `components::PersistentAoECloud`
   --> src\components.rs:148:28
    |
120 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
148 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::PersistentAoECloud`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `FromReflect` for type `components::ActiveDebuff`
   --> src\components.rs:158:28
    |
130 | #[derive(Component, Debug, Reflect)]
    |                            ------- first implementation here
...
158 | #[derive(Component, Debug, Reflect)]
    |                            ^^^^^^^ conflicting implementation for `components::ActiveDebuff`
    |
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0119]: conflicting implementations of trait `std::default::Default` for type `LineDashAttackParams`
   --> src\items.rs:335:33
    |
335 | #[derive(Debug, Clone, Reflect, Default)]
    |                                 ^^^^^^^ conflicting implementation for `LineDashAttackParams`
...
347 | impl Default for LineDashAttackParams {
    | ------------------------------------- first implementation here

error[E0061]: this function takes 19 arguments but 12 arguments were supplied
   --> src\survivor.rs:368:25
    |
368 |                           spawn_automatic_projectile(
    |  _________________________^^^^^^^^^^^^^^^^^^^^^^^^^^-
369 | |                             &mut commands,
370 | |                             &asset_server,
371 | |                             survivor_transform.translation,
    | |                             ------------------------------ argument #3 of type `bevy::prelude::Entity` is missing
372 | |                             projectile_direction,
    | |                             -------------------- expected `u32`, found `Vec2`
...   |
376 | |                             weapon_def.id, // weapon_def.id is still correct
    | |                             ------------- expected `f32`, found `AutomaticWeaponId`
...   |
380 | |                             effective_projectile_lifetime_secs,
381 | |                         );
    | |_________________________- multiple arguments are missing
    |
note: function defined here
   --> src\automatic_projectiles.rs:76:8
    |
76  | pub fn spawn_automatic_projectile(
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
79  |     owner: Entity, // Added owner
    |     -------------
...
84  |     piercing: u32,
    |     -------------
...
89  |     lifetime_secs: f32,
    |     ------------------
90  |     // Bouncing parameters
91  |     opt_max_bounces: Option<u32>,
    |     ----------------------------
92  |     opt_dmg_loss_mult: Option<f32>,
    |     ------------------------------
93  |     opt_speed_loss_mult: Option<f32>,
    |     --------------------------------
94  |     // Lifesteal parameter
95  |     opt_lifesteal_percentage: Option<f32>,
    |     -------------------------------------
96  |     // Tether parameter
97  |     opt_tether_params_for_comp: Option<crate::items::RepositioningTetherParams>,
    |     ---------------------------------------------------------------------------
98  |     // Blink Strike parameter
99  |     opt_blink_params: Option<crate::items::BlinkStrikeProjectileParams>,
    |     -------------------------------------------------------------------
help: provide the arguments
    |
368 -                         spawn_automatic_projectile(
369 -                             &mut commands,
370 -                             &asset_server,
371 -                             survivor_transform.translation,
372 -                             projectile_direction,
373 -                             current_damage,
374 -                             current_speed,
375 -                             current_piercing,
376 -                             weapon_def.id, // weapon_def.id is still correct
377 -                             params.projectile_sprite_path,
378 -                             params.projectile_size,
379 -                             params.projectile_color,
380 -                             effective_projectile_lifetime_secs,
381 -                         );
368 +                         spawn_automatic_projectile(&mut commands, &asset_server, /* bevy::prelude::Entity */, survivor_transform.translation, current_damage, current_speed, current_piercing, /* u32 */, params.projectile_sprite_path, params.projectile_size, params.projectile_color, effective_projectile_lifetime_secs, /* f32 */, /* std::option::Option<u32> */, /* std::option::Option<f32> */, /* std::option::Option<f32> */, /* std::option::Option<f32> */, /* std::option::Option<RepositioningTetherParams> */, /* std::option::Option<BlinkStrikeProjectileParams> */);
    |

error[E0425]: cannot find function, tuple struct or tuple variant `OnUpdate` in this scope
   --> src\automatic_projectiles.rs:26:30
    |
26  |             ).chain().in_set(OnUpdate(AppState::InGame)))
    |                              ^^^^^^^^ help: a unit struct with a similar name exists: `Update`
    |
   ::: C:\Users\mesco\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bevy_app-0.13.2\src\main_schedule.rs:140:1
    |
140 | pub struct Update;
    | ----------------- similarly named unit struct `Update` defined here

error[E0425]: cannot find function, tuple struct or tuple variant `OnUpdate` in this scope
   --> src\automatic_projectiles.rs:27:81
    |
27  |             .add_systems(PostUpdate, reset_projectile_bounce_flag_system.in_set(OnUpdate(AppState::InGame)));
    |                                                                                 ^^^^^^^^ help: a unit struct with a similar name exists: `Update`
    |
   ::: C:\Users\mesco\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bevy_app-0.13.2\src\main_schedule.rs:140:1
    |
140 | pub struct Update;
    | ----------------- similarly named unit struct `Update` defined here

error[E0277]: the trait bound `bevy::prelude::Entity: std::default::Default` is not satisfied
  --> src\automatic_projectiles.rs:34:5
   |
31 | #[derive(Component, Reflect, Default, Debug)]
   |                              ------- in this derive macro expansion
...
34 |     pub owner: Entity, // Added owner entity
   |     ^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `bevy::prelude::Entity`

error[E0609]: no field `hit_horror_entity` on type `&mut PlayerTetherState`
   --> src\automatic_projectiles.rs:232:77
    |
232 | ...                   if commands.get_entity(existing_activation_comp.hit_horror_entity).is_some() {
    |                                                                       ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `last_tether_mode_used`, `tethered_enemy_entity`, `current_weapon_params_snapshot`

error[E0609]: no field `hit_horror_entity` on type `&mut PlayerTetherState`
   --> src\automatic_projectiles.rs:233:74
    |
233 | ...   commands.entity(existing_activation_comp.hit_horror_entity).remove::<crate::weapon_systems::HorrorLatche...
    |                                                ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `last_tether_mode_used`, `tethered_enemy_entity`, `current_weapon_params_snapshot`

error[E0599]: no variant or associated item named `TetherHit` found for enum `SoundEffect` in the current scope
   --> src\automatic_projectiles.rs:261:77
    |
261 |                         sound_event_writer.send(PlaySoundEvent(SoundEffect::TetherHit));
    |                                                                             ^^^^^^^^^ variant or associated item not found in `SoundEffect`
    |
   ::: src\audio.rs:9:1
    |
9   | pub enum SoundEffect {
    | -------------------- variant or associated item `TetherHit` not found for this enum

error[E0599]: no variant or associated item named `BlinkStrike` found for enum `AttackTypeData` in the current scope
   --> src\automatic_projectiles.rs:286:62
    |
286 | ...s::AttackTypeData::BlinkStrike(ref blink_strike_params) = weapon_def.attack_data {
    |                       ^^^^^^^^^^^ variant or associated item not found in `AttackTypeData`
    |
   ::: src\items.rs:399:1
    |
399 | pub enum AttackTypeData {
    | ----------------------- variant or associated item `BlinkStrike` not found for this enum

error[E0599]: no method named `normalize_or_else` found for struct `bevy::prelude::Vec2` in the current scope
   --> src\automatic_projectiles.rs:366:138
    |
366 | ... horror_gtransform.translation().truncate()).normalize_or_else(Vec2::X);
    |                                                 ^^^^^^^^^^^^^^^^^
    |
help: there is a method `normalize` with a similar name, but with different arguments
   --> C:\Users\mesco\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\glam-0.25.0\src\f32\vec2.rs:416:5
    |
416 |     pub fn normalize(self) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get` found for struct `EntityCommands` in the current scope
   --> src\automatic_projectiles.rs:455:74
    |
455 | ...   if let Some(_explosion_params) = commands.entity(entity).get::<crate::weapon_systems::ExplodesOnFinalImp...
    |                                                                ^^^ method not found in `EntityCommands<'_>`

error[E0277]: the trait bound `DebuffAuraParams: std::default::Default` is not satisfied
   --> src\visual_effects.rs:163:5
    |
160 | #[derive(Component, Debug, Reflect, Default)]
    |                                     ------- in this derive macro expansion
...
163 |     pub params: crate::items::DebuffAuraParams,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `DebuffAuraParams`
    |
help: consider annotating `DebuffAuraParams` with `#[derive(Default)]`
   --> src\items.rs:289:1
    |
289 + #[derive(Default)]
290 | pub struct DebuffAuraParams {
    |

error[E0277]: the trait bound `ExpandingEnergyBombParams: std::default::Default` is not satisfied
   --> src\visual_effects.rs:182:5
    |
179 | #[derive(Component, Debug, Reflect, Default)]
    |                                     ------- in this derive macro expansion
...
182 |     pub params: crate::items::ExpandingEnergyBombParams,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `ExpandingEnergyBombParams`
    |
help: consider annotating `ExpandingEnergyBombParams` with `#[derive(Default)]`
   --> src\items.rs:265:1
    |
265 + #[derive(Default)]
266 | pub struct ExpandingEnergyBombParams {
    |

error[E0308]: mismatched types
   --> src\visual_effects.rs:373:37
    |
366 | ...ection = initial_aim_direction;
    |             --------------------- expected due to this value
...
373 | ...on = Quat::from_rotation_z(angle_offset_degrees.to_radians()) * current_aim_direction.extend(0.0);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec2`, found `Vec3`

error[E0599]: no method named `truncate` found for struct `bevy::prelude::Vec2` in the current scope
   --> src\visual_effects.rs:374:59
    |
374 |             current_aim_direction = current_aim_direction.truncate().normalize_or_zero();
    |                                                           ^^^^^^^^
    |
help: there is a method `trunc` with a similar name
    |
374 -             current_aim_direction = current_aim_direction.truncate().normalize_or_zero();
374 +             current_aim_direction = current_aim_direction.trunc().normalize_or_zero();
    |

error[E0063]: missing fields `blink_params_on_hit`, `bounces_left`, `current_speed` and 6 other fields in initializer of `AutomaticProjectile`
   --> src\visual_effects.rs:400:13
    |
400 |             crate::automatic_projectiles::AutomaticProjectile {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `blink_params_on_hit`, `bounces_left`, `current_speed` and 6 other fields

error[E0599]: no variant or associated item named `Paused` found for enum `bevy::prelude::TimerMode` in the current scope
   --> src\visual_effects.rs:487:125
    |
487 | ...ansion_secs, TimerMode::Paused),
    |                            ^^^^^^ variant or associated item not found in `TimerMode`

error[E0609]: no field `active_automatic_weapon_id` on type `&Survivor`
   --> src\visual_effects.rs:721:50
    |
721 |     if let Some(active_weapon_id) = player_stats.active_automatic_weapon_id {
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `speed`, `experience`, `current_level_xp`, `level`, `aim_direction` ... and 59 others

error[E0599]: no method named `get_mut` found for struct `EntityCommands` in the current scope
   --> src\visual_effects.rs:801:76
    |
801 | ...mmands.entity(player_entity).get_mut::<PlayerPersistentAuraComponent>().unwrap(); // Re-borrow to satisfy b...
    |                                 ^^^^^^^ method not found in `EntityCommands<'_>`
    |
help: consider pinning the expression
    |
801 ~                 let mut pinned = std::pin::pin!(commands.entity(player_entity));
802 ~                 let mut mutable_aura_comp = pinned.as_mut().get_mut::<PlayerPersistentAuraComponent>().unwrap(); // Re-borrow to satisfy borrow checker
    |

error[E0599]: no variant or associated item named `GlacialNovaHit` found for enum `SoundEffect` in the current scope
   --> src\visual_effects.rs:881:93
    |
881 |             sound_event_writer.send(crate::audio::PlaySoundEvent(crate::audio::SoundEffect::GlacialNovaHit));
    |                                                                                             ^^^^^^^^^^^^^^ variant or associated item not found in `SoundEffect`
    |
   ::: src\audio.rs:9:1
    |
9   | pub enum SoundEffect {
    | -------------------- variant or associated item `GlacialNovaHit` not found for this enum

error[E0599]: no variant or associated item named `ChainLightningZap` found for enum `SoundEffect` in the current scope
   --> src\visual_effects.rs:987:97
    |
987 | ...dio::SoundEffect::ChainLightningZap));
    |                      ^^^^^^^^^^^^^^^^^ variant or associated item not found in `SoundEffect`
    |
   ::: src\audio.rs:9:1
    |
9   | pub enum SoundEffect {
    | -------------------- variant or associated item `ChainLightningZap` not found for this enum

error[E0063]: missing fields `blink_params_on_hit`, `bounces_left`, `current_speed` and 6 other fields in initializer of `AutomaticProjectile`
    --> src\visual_effects.rs:1069:9
     |
1069 |         crate::automatic_projectiles::AutomaticProjectile {
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `blink_params_on_hit`, `bounces_left`, `current_speed` and 6 other fields

error[E0560]: struct `AutomaticProjectile` has no field named `already_hit_entities`
    --> src\visual_effects.rs:1197:13
     |
1197 |             already_hit_entities: Vec::new(), // Initialize empty
     |             ^^^^^^^^^^^^^^^^^^^^ `AutomaticProjectile` does not have this field
     |
     = note: available fields are: `owner`, `weapon_id`, `bounces_left`, `damage_on_hit`, `current_speed` ... and 5 others

error[E0277]: the trait bound `DebuffAuraParams: std::default::Default` is not satisfied
   --> src\weapon_systems.rs:155:5
    |
152 | #[derive(Component, Debug, Reflect, Default)]
    |                                     ------- in this derive macro expansion
...
155 |     pub params: crate::items::DebuffAuraParams,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `DebuffAuraParams`
    |
help: consider annotating `DebuffAuraParams` with `#[derive(Default)]`
   --> src\items.rs:289:1
    |
289 + #[derive(Default)]
290 | pub struct DebuffAuraParams {
    |

error[E0277]: the trait bound `ExpandingEnergyBombParams: std::default::Default` is not satisfied
   --> src\weapon_systems.rs:174:5
    |
171 | #[derive(Component, Debug, Reflect, Default)]
    |                                     ------- in this derive macro expansion
...
174 |     pub params: crate::items::ExpandingEnergyBombParams,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `ExpandingEnergyBombParams`
    |
help: consider annotating `ExpandingEnergyBombParams` with `#[derive(Default)]`
   --> src\items.rs:265:1
    |
265 + #[derive(Default)]
266 | pub struct ExpandingEnergyBombParams {
    |

error[E0277]: the trait bound `GroundTargetedAoEParams: std::default::Default` is not satisfied
   --> src\weapon_systems.rs:212:5
    |
208 | #[derive(Component, Debug, Reflect, Default)]
    |                                     ------- in this derive macro expansion
...
212 |     pub params: crate::items::GroundTargetedAoEParams,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `GroundTargetedAoEParams`
    |
help: consider annotating `GroundTargetedAoEParams` with `#[derive(Default)]`
   --> src\items.rs:196:1
    |
196 + #[derive(Default)]
197 | pub struct GroundTargetedAoEParams {
    |

error[E0308]: mismatched types
   --> src\weapon_systems.rs:301:18
    |
301 |             Some(params.clone()), // opt_blink_params
    |             ---- ^^^^^^^^^^^^^^ expected `RepositioningTetherParams`, found `BlinkStrikeProjectileParams`
    |             |
    |             arguments to this enum variant are incorrect
    |
help: the type constructed contains `BlinkStrikeProjectileParams` due to the type of the argument passed
   --> src\weapon_systems.rs:301:13
    |
301 |             Some(params.clone()), // opt_blink_params
    |             ^^^^^--------------^
    |                  |
    |                  this argument influences the type of `Some`
note: tuple variant defined here
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359\library\core\src\option.rs:580:5

error[E0061]: this function takes 19 arguments but 18 arguments were supplied
   --> src\weapon_systems.rs:283:9
    |
283 |         crate::automatic_projectiles::spawn_automatic_projectile(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
286 |             player_transform.translation,
    |             ---------------------------- argument #3 of type `bevy::prelude::Entity` is missing
    |
note: function defined here
   --> src\automatic_projectiles.rs:76:8
    |
76  | pub fn spawn_automatic_projectile(
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
79  |     owner: Entity, // Added owner
    |     -------------
help: provide the argument
    |
283 -         crate::automatic_projectiles::spawn_automatic_projectile(
284 -             commands,
285 -             asset_server,
286 -             player_transform.translation,
287 -             current_projectile_aim_direction,
288 -             params.base_damage,
289 -             params.projectile_speed,
290 -             params.piercing,
291 -             weapon_id,
292 -             params.projectile_sprite_path,
293 -             params.projectile_size,
294 -             params.projectile_color,
295 -             params.projectile_lifetime_secs,
296 -             None, // opt_max_bounces
297 -             None, // opt_dmg_loss_mult
298 -             None, // opt_speed_loss_mult
299 -             None, // opt_lifesteal_percentage
300 -             None, // opt_tether_params_for_comp
301 -             Some(params.clone()), // opt_blink_params
302 -         );
283 +         crate::automatic_projectiles::spawn_automatic_projectile(commands, asset_server, /* bevy::prelude::Entity */, player_transform.translation, current_projectile_aim_direction, params.base_damage, params.projectile_speed, params.piercing, weapon_id, params.projectile_sprite_path, params.projectile_size, params.projectile_color, params.projectile_lifetime_secs, None, None, None, None, Some(params.clone()), None);
    |

error[E0277]: the trait bound `RepositioningTetherParams: std::default::Default` is not satisfied
   --> src\weapon_systems.rs:311:5
    |
308 | #[derive(Component, Debug, Reflect, Default)]
    |                                     ------- in this derive macro expansion
...
311 |     pub params_snapshot: crate::items::RepositioningTetherParams,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `RepositioningTetherParams`
    |
help: consider annotating `RepositioningTetherParams` with `#[derive(Default)]`
   --> src\items.rs:121:1
    |
121 + #[derive(Default)]
122 | pub struct RepositioningTetherParams {
    |

error[E0277]: the trait bound `bevy::prelude::Entity: std::default::Default` is not satisfied
   --> src\weapon_systems.rs:352:5
    |
349 | #[derive(Component, Debug, Reflect, Default)]
    |                                     ------- in this derive macro expansion
...
352 |     pub player_who_latched: Entity,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `bevy::prelude::Entity`

error[E0308]: mismatched types
   --> src\weapon_systems.rs:454:18
    |
454 |             Some(weapon_params.clone()), // Pass RepositioningTetherParams for the projectile to carry
    |             ---- ^^^^^^^^^^^^^^^^^^^^^ expected `f32`, found `RepositioningTetherParams`
    |             |
    |             arguments to this enum variant are incorrect
    |
help: the type constructed contains `RepositioningTetherParams` due to the type of the argument passed
   --> src\weapon_systems.rs:454:13
    |
454 |             Some(weapon_params.clone()), // Pass RepositioningTetherParams for the projectile to carry
    |             ^^^^^---------------------^
    |                  |
    |                  this argument influences the type of `Some`
note: tuple variant defined here
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359\library\core\src\option.rs:580:5

error[E0061]: this function takes 19 arguments but 18 arguments were supplied
   --> src\weapon_systems.rs:440:34
    |
440 |         let _projectile_entity = crate::automatic_projectiles::spawn_automatic_projectile(
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
443 |             player_transform.translation, // Current player transform for spawn
    |             ---------------------------- argument #3 of type `bevy::prelude::Entity` is missing
    |
note: function defined here
   --> src\automatic_projectiles.rs:76:8
    |
76  | pub fn spawn_automatic_projectile(
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
79  |     owner: Entity, // Added owner
    |     -------------
help: provide the argument
    |
440 -         let _projectile_entity = crate::automatic_projectiles::spawn_automatic_projectile(
441 -             commands,
442 -             asset_server,
443 -             player_transform.translation, // Current player transform for spawn
444 -             aim_direction,
445 -             0, // Tether projectile damage (0 or very low)
446 -             weapon_params.tether_projectile_speed,
447 -             0, // Piercing
448 -             weapon_id,
449 -             weapon_params.tether_sprite_path,
450 -             weapon_params.tether_size,
451 -             weapon_params.tether_color,
452 -             weapon_params.tether_range / weapon_params.tether_projectile_speed, // Lifetime
453 -             None, None, None, None, // Bouncing, Lifesteal
454 -             Some(weapon_params.clone()), // Pass RepositioningTetherParams for the projectile to carry
455 -             None, // No blink params
456 -         );
440 +         let _projectile_entity = crate::automatic_projectiles::spawn_automatic_projectile(commands, asset_server, /* bevy::prelude::Entity */, player_transform.translation, aim_direction, 0, weapon_params.tether_projectile_speed, 0, weapon_id, weapon_params.tether_sprite_path, weapon_params.tether_size, weapon_params.tether_color, weapon_params.tether_range / weapon_params.tether_projectile_speed, None, None, None, Some(weapon_params.clone()), None, None);
    |

error[E0277]: the trait bound `LobbedBouncingMagmaParams: std::default::Default` is not satisfied
   --> src\weapon_systems.rs:527:5
    |
524 | #[derive(Component, Debug, Reflect, Default)]
    |                                     ------- in this derive macro expansion
...
527 |     pub params: crate::items::LobbedBouncingMagmaParams,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `LobbedBouncingMagmaParams`
    |
help: consider annotating `LobbedBouncingMagmaParams` with `#[derive(Default)]`
   --> src\items.rs:380:1
    |
380 + #[derive(Default)]
381 | pub struct LobbedBouncingMagmaParams {
    |

error[E0277]: the trait bound `OrbitingPetParams: std::default::Default` is not satisfied
   --> src\weapon_systems.rs:604:5
    |
601 | #[derive(Component, Debug, Reflect, Default)]
    |                                     ------- in this derive macro expansion
...
604 |     pub params_snapshot: crate::items::OrbitingPetParams, // Cloned params
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `OrbitingPetParams`
    |
help: consider annotating `OrbitingPetParams` with `#[derive(Default)]`
   --> src\items.rs:154:1
    |
154 + #[derive(Default)]
155 | pub struct OrbitingPetParams {
    |

error[E0277]: the trait bound `bevy::prelude::Entity: std::default::Default` is not satisfied
   --> src\weapon_systems.rs:609:5
    |
601 | #[derive(Component, Debug, Reflect, Default)]
    |                                     ------- in this derive macro expansion
...
609 |     pub owner_player_entity: Entity,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `bevy::prelude::Entity`

error[E0599]: the method `in_set` exists for tuple `(..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`, but its trait bounds were not satisfied
   --> src\weapon_systems.rs:719:15
    |
692 |               .add_systems(Update, (
    |  __________________________________-
693 | |                 manage_player_orbs_system,
694 | |                 orbiting_pet_behavior_system,
695 | |                 tether_reactivation_window_system,
...   |
718 | |                 repositioning_tether_firing_system, // Added new system
719 | |             ).in_set(OnUpdate(AppState::InGame)));
    | |              -^^^^^^ method cannot be called due to unsatisfied trait bounds
    | |______________|
    |
    |
    = note: the following trait bounds were not satisfied:
            `(for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h bevy::prelude::Transform, &'i mut Survivor, std::option::Option<&'j mut PlayerOrbControllerComponent>)>, bevy::prelude::Query<'k, 'l, bevy::prelude::Entity, bevy::prelude::With<OrbitingPetComponent>>) {manage_player_orbs_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut OrbitingPetComponent)>, bevy::prelude::Query<'i, 'j, &'k bevy::prelude::Transform, (bevy::prelude::With<Survivor>, bevy::prelude::Without<OrbitingPetComponent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>, bevy::prelude::Query<'o, 'p, &'q mut Health, bevy::prelude::With<Horror>>) {orbiting_pet_behavior_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut PlayerWaitingTetherActivationComponent)>) {weapon_systems::tether_reactivation_window_system}, for<'a, 'b, 'c, 'd, 'e> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, &'d mut weapon_systems::ChargingWeaponComponent>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>) {weapon_systems::charge_weapon_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (&'g mut weapon_systems::TrailSpawningProjectileComponent, &'h bevy::prelude::Transform)>) {weapon_systems::trail_spawning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::FireTrailSegmentComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::fire_trail_segment_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ChainLightningZapEffectComponent)>) {weapon_systems::chain_lightning_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::NovaVisualComponent, &'g mut bevy::prelude::Sprite)>) {weapon_systems::nova_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Res<'f, AutomaticWeaponLibrary>, bevy::prelude::Query<'g, 'h, (bevy::prelude::Entity, &'i bevy::prelude::Transform, &'j Survivor, std::option::Option<&'k weapon_systems::PlayerPersistentAuraComponent>)>, bevy::prelude::Query<'l, 'm, (&'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>) {weapon_systems::manage_persistent_aura_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::DebuffCloudVisualComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>) {weapon_systems::debuff_cloud_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut weapon_systems::ExpandingEnergyBombComponent, &'h mut bevy::prelude::Transform, &'i mut bevy::prelude::Sprite, &'j bevy::prelude::GlobalTransform, std::option::Option<&'k bevy::prelude::Parent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, (bevy::prelude::Entity, &'r bevy::prelude::Transform), bevy::prelude::With<Survivor>>) {weapon_systems::expanding_energy_bomb_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, (&'d mut Velocity, &'e bevy::prelude::GlobalTransform, &'f mut weapon_systems::HomingTargetComponent, &'g Lifetime)>, bevy::prelude::Query<'h, 'i, &'j bevy::prelude::GlobalTransform, bevy::prelude::With<Horror>>) {weapon_systems::homing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ReturningProjectileComponent, &'g mut Velocity, &'h bevy::prelude::Transform)>) {weapon_systems::returning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::ResMut<'d, weapon_systems::ActiveIchorPools>, bevy::prelude::Res<'e, bevy::prelude::Time>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h weapon_systems::LobbedProjectileComponent, &'i bevy::prelude::Transform, &'j mut Lifetime)>) {weapon_systems::lobbed_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::IchorPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (&'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::ResMut<'l, weapon_systems::ActiveIchorPools>) {weapon_systems::ichor_pool_system}, for<'a, 'b, 'c, 'd> fn(bevy::prelude::Query<'a, 'b, (bevy::prelude::Entity, &'c mut Survivor, std::option::Option<&'d weapon_systems::IsChannelingComponent>)>) {weapon_systems::player_is_channeling_effect_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Query<'a, 'b, (&'c bevy::prelude::Transform, &'d Survivor), (bevy::prelude::With<Survivor>, bevy::prelude::Without<weapon_systems::ChanneledBeamComponent>)>, bevy::prelude::Query<'e, 'f, (&'g mut bevy::prelude::Transform, &'h weapon_systems::ChanneledBeamComponent)>) {weapon_systems::channeled_beam_update_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (&'f mut weapon_systems::ChanneledBeamComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::channeled_beam_damage_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, AutomaticWeaponLibrary>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g bevy::prelude::GlobalTransform, &'h Survivor)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k mut bevy::prelude::Transform, &'l GroundTargetReticuleComponent, &'m bevy::prelude::Parent)>, bevy::prelude::Query<'n, 'o, &'p bevy::prelude::Window, bevy::prelude::With<PrimaryWindow>>, bevy::prelude::Query<'q, 'r, (&'s bevy::prelude::Camera, &'t bevy::prelude::GlobalTransform), bevy::prelude::With<MainCamera>>) {ground_targeting_reticule_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h mut PendingGroundAoEComponent)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k bevy::prelude::GlobalTransform, &'l mut Health, &'m mut Velocity), bevy::prelude::With<Horror>>) {pending_ground_aoe_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut EruptionVisualComponent, &'g mut bevy::prelude::Sprite)>) {eruption_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut Survivor, &'i mut PlayerDashingComponent), (bevy::prelude::With<Survivor>, bevy::prelude::Without<Horror>)>, bevy::prelude::Query<'j, 'k, (bevy::prelude::Entity, &'l bevy::prelude::GlobalTransform, &'m mut Health, &'n Horror)>) {player_dashing_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, bevy::prelude::Time>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut LobbedBouncingProjectileComponent, &'h mut Velocity, &'i mut Damage, &'j bevy::prelude::Transform, &'k mut Lifetime, &'l mut AutomaticProjectile)>) {lobbed_bouncing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut MagmaPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Res<'l, bevy::prelude::AssetServer>) {magma_pool_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f bevy::prelude::Transform, &'g {type error}, &'h {type error}), {type error}>, bevy::prelude::Res<'i, AutomaticWeaponLibrary>, bevy::prelude::Query<'j, 'k, &'l mut PlayerWaitingTetherActivationComponent>, bevy::prelude::Query<'m, 'n, &'o mut bevy::prelude::Transform, bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, &'r bevy::prelude::Transform, bevy::prelude::With<Survivor>>) {repositioning_tether_firing_system}): bevy::prelude::IntoSystem<(), (), _>`
            which is required by `(for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h bevy::prelude::Transform, &'i mut Survivor, std::option::Option<&'j mut PlayerOrbControllerComponent>)>, bevy::prelude::Query<'k, 'l, bevy::prelude::Entity, bevy::prelude::With<OrbitingPetComponent>>) {manage_player_orbs_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut OrbitingPetComponent)>, bevy::prelude::Query<'i, 'j, &'k bevy::prelude::Transform, (bevy::prelude::With<Survivor>, bevy::prelude::Without<OrbitingPetComponent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>, bevy::prelude::Query<'o, 'p, &'q mut Health, bevy::prelude::With<Horror>>) {orbiting_pet_behavior_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut PlayerWaitingTetherActivationComponent)>) {weapon_systems::tether_reactivation_window_system}, for<'a, 'b, 'c, 'd, 'e> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, &'d mut weapon_systems::ChargingWeaponComponent>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>) {weapon_systems::charge_weapon_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (&'g mut weapon_systems::TrailSpawningProjectileComponent, &'h bevy::prelude::Transform)>) {weapon_systems::trail_spawning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::FireTrailSegmentComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::fire_trail_segment_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ChainLightningZapEffectComponent)>) {weapon_systems::chain_lightning_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::NovaVisualComponent, &'g mut bevy::prelude::Sprite)>) {weapon_systems::nova_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Res<'f, AutomaticWeaponLibrary>, bevy::prelude::Query<'g, 'h, (bevy::prelude::Entity, &'i bevy::prelude::Transform, &'j Survivor, std::option::Option<&'k weapon_systems::PlayerPersistentAuraComponent>)>, bevy::prelude::Query<'l, 'm, (&'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>) {weapon_systems::manage_persistent_aura_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::DebuffCloudVisualComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>) {weapon_systems::debuff_cloud_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut weapon_systems::ExpandingEnergyBombComponent, &'h mut bevy::prelude::Transform, &'i mut bevy::prelude::Sprite, &'j bevy::prelude::GlobalTransform, std::option::Option<&'k bevy::prelude::Parent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, (bevy::prelude::Entity, &'r bevy::prelude::Transform), bevy::prelude::With<Survivor>>) {weapon_systems::expanding_energy_bomb_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, (&'d mut Velocity, &'e bevy::prelude::GlobalTransform, &'f mut weapon_systems::HomingTargetComponent, &'g Lifetime)>, bevy::prelude::Query<'h, 'i, &'j bevy::prelude::GlobalTransform, bevy::prelude::With<Horror>>) {weapon_systems::homing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ReturningProjectileComponent, &'g mut Velocity, &'h bevy::prelude::Transform)>) {weapon_systems::returning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::ResMut<'d, weapon_systems::ActiveIchorPools>, bevy::prelude::Res<'e, bevy::prelude::Time>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h weapon_systems::LobbedProjectileComponent, &'i bevy::prelude::Transform, &'j mut Lifetime)>) {weapon_systems::lobbed_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::IchorPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (&'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::ResMut<'l, weapon_systems::ActiveIchorPools>) {weapon_systems::ichor_pool_system}, for<'a, 'b, 'c, 'd> fn(bevy::prelude::Query<'a, 'b, (bevy::prelude::Entity, &'c mut Survivor, std::option::Option<&'d weapon_systems::IsChannelingComponent>)>) {weapon_systems::player_is_channeling_effect_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Query<'a, 'b, (&'c bevy::prelude::Transform, &'d Survivor), (bevy::prelude::With<Survivor>, bevy::prelude::Without<weapon_systems::ChanneledBeamComponent>)>, bevy::prelude::Query<'e, 'f, (&'g mut bevy::prelude::Transform, &'h weapon_systems::ChanneledBeamComponent)>) {weapon_systems::channeled_beam_update_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (&'f mut weapon_systems::ChanneledBeamComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::channeled_beam_damage_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, AutomaticWeaponLibrary>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g bevy::prelude::GlobalTransform, &'h Survivor)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k mut bevy::prelude::Transform, &'l GroundTargetReticuleComponent, &'m bevy::prelude::Parent)>, bevy::prelude::Query<'n, 'o, &'p bevy::prelude::Window, bevy::prelude::With<PrimaryWindow>>, bevy::prelude::Query<'q, 'r, (&'s bevy::prelude::Camera, &'t bevy::prelude::GlobalTransform), bevy::prelude::With<MainCamera>>) {ground_targeting_reticule_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h mut PendingGroundAoEComponent)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k bevy::prelude::GlobalTransform, &'l mut Health, &'m mut Velocity), bevy::prelude::With<Horror>>) {pending_ground_aoe_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut EruptionVisualComponent, &'g mut bevy::prelude::Sprite)>) {eruption_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut Survivor, &'i mut PlayerDashingComponent), (bevy::prelude::With<Survivor>, bevy::prelude::Without<Horror>)>, bevy::prelude::Query<'j, 'k, (bevy::prelude::Entity, &'l bevy::prelude::GlobalTransform, &'m mut Health, &'n Horror)>) {player_dashing_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, bevy::prelude::Time>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut LobbedBouncingProjectileComponent, &'h mut Velocity, &'i mut Damage, &'j bevy::prelude::Transform, &'k mut Lifetime, &'l mut AutomaticProjectile)>) {lobbed_bouncing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut MagmaPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Res<'l, bevy::prelude::AssetServer>) {magma_pool_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f bevy::prelude::Transform, &'g {type error}, &'h {type error}), {type error}>, bevy::prelude::Res<'i, AutomaticWeaponLibrary>, bevy::prelude::Query<'j, 'k, &'l mut PlayerWaitingTetherActivationComponent>, bevy::prelude::Query<'m, 'n, &'o mut bevy::prelude::Transform, bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, &'r bevy::prelude::Transform, bevy::prelude::With<Survivor>>) {repositioning_tether_firing_system}): bevy::prelude::IntoSystemConfigs<_>`
            `(for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h bevy::prelude::Transform, &'i mut Survivor, std::option::Option<&'j mut PlayerOrbControllerComponent>)>, bevy::prelude::Query<'k, 'l, bevy::prelude::Entity, bevy::prelude::With<OrbitingPetComponent>>) {manage_player_orbs_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut OrbitingPetComponent)>, bevy::prelude::Query<'i, 'j, &'k bevy::prelude::Transform, (bevy::prelude::With<Survivor>, bevy::prelude::Without<OrbitingPetComponent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>, bevy::prelude::Query<'o, 'p, &'q mut Health, bevy::prelude::With<Horror>>) {orbiting_pet_behavior_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut PlayerWaitingTetherActivationComponent)>) {weapon_systems::tether_reactivation_window_system}, for<'a, 'b, 'c, 'd, 'e> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, &'d mut weapon_systems::ChargingWeaponComponent>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>) {weapon_systems::charge_weapon_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (&'g mut weapon_systems::TrailSpawningProjectileComponent, &'h bevy::prelude::Transform)>) {weapon_systems::trail_spawning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::FireTrailSegmentComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::fire_trail_segment_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ChainLightningZapEffectComponent)>) {weapon_systems::chain_lightning_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::NovaVisualComponent, &'g mut bevy::prelude::Sprite)>) {weapon_systems::nova_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Res<'f, AutomaticWeaponLibrary>, bevy::prelude::Query<'g, 'h, (bevy::prelude::Entity, &'i bevy::prelude::Transform, &'j Survivor, std::option::Option<&'k weapon_systems::PlayerPersistentAuraComponent>)>, bevy::prelude::Query<'l, 'm, (&'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>) {weapon_systems::manage_persistent_aura_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::DebuffCloudVisualComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>) {weapon_systems::debuff_cloud_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut weapon_systems::ExpandingEnergyBombComponent, &'h mut bevy::prelude::Transform, &'i mut bevy::prelude::Sprite, &'j bevy::prelude::GlobalTransform, std::option::Option<&'k bevy::prelude::Parent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, (bevy::prelude::Entity, &'r bevy::prelude::Transform), bevy::prelude::With<Survivor>>) {weapon_systems::expanding_energy_bomb_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, (&'d mut Velocity, &'e bevy::prelude::GlobalTransform, &'f mut weapon_systems::HomingTargetComponent, &'g Lifetime)>, bevy::prelude::Query<'h, 'i, &'j bevy::prelude::GlobalTransform, bevy::prelude::With<Horror>>) {weapon_systems::homing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ReturningProjectileComponent, &'g mut Velocity, &'h bevy::prelude::Transform)>) {weapon_systems::returning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::ResMut<'d, weapon_systems::ActiveIchorPools>, bevy::prelude::Res<'e, bevy::prelude::Time>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h weapon_systems::LobbedProjectileComponent, &'i bevy::prelude::Transform, &'j mut Lifetime)>) {weapon_systems::lobbed_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::IchorPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (&'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::ResMut<'l, weapon_systems::ActiveIchorPools>) {weapon_systems::ichor_pool_system}, for<'a, 'b, 'c, 'd> fn(bevy::prelude::Query<'a, 'b, (bevy::prelude::Entity, &'c mut Survivor, std::option::Option<&'d weapon_systems::IsChannelingComponent>)>) {weapon_systems::player_is_channeling_effect_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Query<'a, 'b, (&'c bevy::prelude::Transform, &'d Survivor), (bevy::prelude::With<Survivor>, bevy::prelude::Without<weapon_systems::ChanneledBeamComponent>)>, bevy::prelude::Query<'e, 'f, (&'g mut bevy::prelude::Transform, &'h weapon_systems::ChanneledBeamComponent)>) {weapon_systems::channeled_beam_update_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (&'f mut weapon_systems::ChanneledBeamComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::channeled_beam_damage_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, AutomaticWeaponLibrary>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g bevy::prelude::GlobalTransform, &'h Survivor)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k mut bevy::prelude::Transform, &'l GroundTargetReticuleComponent, &'m bevy::prelude::Parent)>, bevy::prelude::Query<'n, 'o, &'p bevy::prelude::Window, bevy::prelude::With<PrimaryWindow>>, bevy::prelude::Query<'q, 'r, (&'s bevy::prelude::Camera, &'t bevy::prelude::GlobalTransform), bevy::prelude::With<MainCamera>>) {ground_targeting_reticule_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h mut PendingGroundAoEComponent)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k bevy::prelude::GlobalTransform, &'l mut Health, &'m mut Velocity), bevy::prelude::With<Horror>>) {pending_ground_aoe_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut EruptionVisualComponent, &'g mut bevy::prelude::Sprite)>) {eruption_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut Survivor, &'i mut PlayerDashingComponent), (bevy::prelude::With<Survivor>, bevy::prelude::Without<Horror>)>, bevy::prelude::Query<'j, 'k, (bevy::prelude::Entity, &'l bevy::prelude::GlobalTransform, &'m mut Health, &'n Horror)>) {player_dashing_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, bevy::prelude::Time>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut LobbedBouncingProjectileComponent, &'h mut Velocity, &'i mut Damage, &'j bevy::prelude::Transform, &'k mut Lifetime, &'l mut AutomaticProjectile)>) {lobbed_bouncing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut MagmaPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Res<'l, bevy::prelude::AssetServer>) {magma_pool_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f bevy::prelude::Transform, &'g {type error}, &'h {type error}), {type error}>, bevy::prelude::Res<'i, AutomaticWeaponLibrary>, bevy::prelude::Query<'j, 'k, &'l mut PlayerWaitingTetherActivationComponent>, bevy::prelude::Query<'m, 'n, &'o mut bevy::prelude::Transform, bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, &'r bevy::prelude::Transform, bevy::prelude::With<Survivor>>) {repositioning_tether_firing_system}): SystemSet`
            which is required by `(for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h bevy::prelude::Transform, &'i mut Survivor, std::option::Option<&'j mut PlayerOrbControllerComponent>)>, bevy::prelude::Query<'k, 'l, bevy::prelude::Entity, bevy::prelude::With<OrbitingPetComponent>>) {manage_player_orbs_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut OrbitingPetComponent)>, bevy::prelude::Query<'i, 'j, &'k bevy::prelude::Transform, (bevy::prelude::With<Survivor>, bevy::prelude::Without<OrbitingPetComponent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>, bevy::prelude::Query<'o, 'p, &'q mut Health, bevy::prelude::With<Horror>>) {orbiting_pet_behavior_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut PlayerWaitingTetherActivationComponent)>) {weapon_systems::tether_reactivation_window_system}, for<'a, 'b, 'c, 'd, 'e> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, &'d mut weapon_systems::ChargingWeaponComponent>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>) {weapon_systems::charge_weapon_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (&'g mut weapon_systems::TrailSpawningProjectileComponent, &'h bevy::prelude::Transform)>) {weapon_systems::trail_spawning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::FireTrailSegmentComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::fire_trail_segment_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ChainLightningZapEffectComponent)>) {weapon_systems::chain_lightning_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::NovaVisualComponent, &'g mut bevy::prelude::Sprite)>) {weapon_systems::nova_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Res<'f, AutomaticWeaponLibrary>, bevy::prelude::Query<'g, 'h, (bevy::prelude::Entity, &'i bevy::prelude::Transform, &'j Survivor, std::option::Option<&'k weapon_systems::PlayerPersistentAuraComponent>)>, bevy::prelude::Query<'l, 'm, (&'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>) {weapon_systems::manage_persistent_aura_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::DebuffCloudVisualComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>) {weapon_systems::debuff_cloud_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut weapon_systems::ExpandingEnergyBombComponent, &'h mut bevy::prelude::Transform, &'i mut bevy::prelude::Sprite, &'j bevy::prelude::GlobalTransform, std::option::Option<&'k bevy::prelude::Parent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, (bevy::prelude::Entity, &'r bevy::prelude::Transform), bevy::prelude::With<Survivor>>) {weapon_systems::expanding_energy_bomb_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, (&'d mut Velocity, &'e bevy::prelude::GlobalTransform, &'f mut weapon_systems::HomingTargetComponent, &'g Lifetime)>, bevy::prelude::Query<'h, 'i, &'j bevy::prelude::GlobalTransform, bevy::prelude::With<Horror>>) {weapon_systems::homing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ReturningProjectileComponent, &'g mut Velocity, &'h bevy::prelude::Transform)>) {weapon_systems::returning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::ResMut<'d, weapon_systems::ActiveIchorPools>, bevy::prelude::Res<'e, bevy::prelude::Time>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h weapon_systems::LobbedProjectileComponent, &'i bevy::prelude::Transform, &'j mut Lifetime)>) {weapon_systems::lobbed_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::IchorPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (&'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::ResMut<'l, weapon_systems::ActiveIchorPools>) {weapon_systems::ichor_pool_system}, for<'a, 'b, 'c, 'd> fn(bevy::prelude::Query<'a, 'b, (bevy::prelude::Entity, &'c mut Survivor, std::option::Option<&'d weapon_systems::IsChannelingComponent>)>) {weapon_systems::player_is_channeling_effect_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Query<'a, 'b, (&'c bevy::prelude::Transform, &'d Survivor), (bevy::prelude::With<Survivor>, bevy::prelude::Without<weapon_systems::ChanneledBeamComponent>)>, bevy::prelude::Query<'e, 'f, (&'g mut bevy::prelude::Transform, &'h weapon_systems::ChanneledBeamComponent)>) {weapon_systems::channeled_beam_update_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (&'f mut weapon_systems::ChanneledBeamComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::channeled_beam_damage_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, AutomaticWeaponLibrary>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g bevy::prelude::GlobalTransform, &'h Survivor)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k mut bevy::prelude::Transform, &'l GroundTargetReticuleComponent, &'m bevy::prelude::Parent)>, bevy::prelude::Query<'n, 'o, &'p bevy::prelude::Window, bevy::prelude::With<PrimaryWindow>>, bevy::prelude::Query<'q, 'r, (&'s bevy::prelude::Camera, &'t bevy::prelude::GlobalTransform), bevy::prelude::With<MainCamera>>) {ground_targeting_reticule_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h mut PendingGroundAoEComponent)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k bevy::prelude::GlobalTransform, &'l mut Health, &'m mut Velocity), bevy::prelude::With<Horror>>) {pending_ground_aoe_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut EruptionVisualComponent, &'g mut bevy::prelude::Sprite)>) {eruption_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut Survivor, &'i mut PlayerDashingComponent), (bevy::prelude::With<Survivor>, bevy::prelude::Without<Horror>)>, bevy::prelude::Query<'j, 'k, (bevy::prelude::Entity, &'l bevy::prelude::GlobalTransform, &'m mut Health, &'n Horror)>) {player_dashing_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, bevy::prelude::Time>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut LobbedBouncingProjectileComponent, &'h mut Velocity, &'i mut Damage, &'j bevy::prelude::Transform, &'k mut Lifetime, &'l mut AutomaticProjectile)>) {lobbed_bouncing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut MagmaPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Res<'l, bevy::prelude::AssetServer>) {magma_pool_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f bevy::prelude::Transform, &'g {type error}, &'h {type error}), {type error}>, bevy::prelude::Res<'i, AutomaticWeaponLibrary>, bevy::prelude::Query<'j, 'k, &'l mut PlayerWaitingTetherActivationComponent>, bevy::prelude::Query<'m, 'n, &'o mut bevy::prelude::Transform, bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, &'r bevy::prelude::Transform, bevy::prelude::With<Survivor>>) {repositioning_tether_firing_system}): bevy::prelude::IntoSystemSetConfigs`
            `&(for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h bevy::prelude::Transform, &'i mut Survivor, std::option::Option<&'j mut PlayerOrbControllerComponent>)>, bevy::prelude::Query<'k, 'l, bevy::prelude::Entity, bevy::prelude::With<OrbitingPetComponent>>) {manage_player_orbs_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut OrbitingPetComponent)>, bevy::prelude::Query<'i, 'j, &'k bevy::prelude::Transform, (bevy::prelude::With<Survivor>, bevy::prelude::Without<OrbitingPetComponent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>, bevy::prelude::Query<'o, 'p, &'q mut Health, bevy::prelude::With<Horror>>) {orbiting_pet_behavior_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut PlayerWaitingTetherActivationComponent)>) {weapon_systems::tether_reactivation_window_system}, for<'a, 'b, 'c, 'd, 'e> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, &'d mut weapon_systems::ChargingWeaponComponent>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>) {weapon_systems::charge_weapon_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (&'g mut weapon_systems::TrailSpawningProjectileComponent, &'h bevy::prelude::Transform)>) {weapon_systems::trail_spawning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::FireTrailSegmentComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::fire_trail_segment_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ChainLightningZapEffectComponent)>) {weapon_systems::chain_lightning_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::NovaVisualComponent, &'g mut bevy::prelude::Sprite)>) {weapon_systems::nova_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Res<'f, AutomaticWeaponLibrary>, bevy::prelude::Query<'g, 'h, (bevy::prelude::Entity, &'i bevy::prelude::Transform, &'j Survivor, std::option::Option<&'k weapon_systems::PlayerPersistentAuraComponent>)>, bevy::prelude::Query<'l, 'm, (&'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>) {weapon_systems::manage_persistent_aura_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::DebuffCloudVisualComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>) {weapon_systems::debuff_cloud_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut weapon_systems::ExpandingEnergyBombComponent, &'h mut bevy::prelude::Transform, &'i mut bevy::prelude::Sprite, &'j bevy::prelude::GlobalTransform, std::option::Option<&'k bevy::prelude::Parent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, (bevy::prelude::Entity, &'r bevy::prelude::Transform), bevy::prelude::With<Survivor>>) {weapon_systems::expanding_energy_bomb_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, (&'d mut Velocity, &'e bevy::prelude::GlobalTransform, &'f mut weapon_systems::HomingTargetComponent, &'g Lifetime)>, bevy::prelude::Query<'h, 'i, &'j bevy::prelude::GlobalTransform, bevy::prelude::With<Horror>>) {weapon_systems::homing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ReturningProjectileComponent, &'g mut Velocity, &'h bevy::prelude::Transform)>) {weapon_systems::returning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::ResMut<'d, weapon_systems::ActiveIchorPools>, bevy::prelude::Res<'e, bevy::prelude::Time>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h weapon_systems::LobbedProjectileComponent, &'i bevy::prelude::Transform, &'j mut Lifetime)>) {weapon_systems::lobbed_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::IchorPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (&'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::ResMut<'l, weapon_systems::ActiveIchorPools>) {weapon_systems::ichor_pool_system}, for<'a, 'b, 'c, 'd> fn(bevy::prelude::Query<'a, 'b, (bevy::prelude::Entity, &'c mut Survivor, std::option::Option<&'d weapon_systems::IsChannelingComponent>)>) {weapon_systems::player_is_channeling_effect_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Query<'a, 'b, (&'c bevy::prelude::Transform, &'d Survivor), (bevy::prelude::With<Survivor>, bevy::prelude::Without<weapon_systems::ChanneledBeamComponent>)>, bevy::prelude::Query<'e, 'f, (&'g mut bevy::prelude::Transform, &'h weapon_systems::ChanneledBeamComponent)>) {weapon_systems::channeled_beam_update_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (&'f mut weapon_systems::ChanneledBeamComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::channeled_beam_damage_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, AutomaticWeaponLibrary>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g bevy::prelude::GlobalTransform, &'h Survivor)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k mut bevy::prelude::Transform, &'l GroundTargetReticuleComponent, &'m bevy::prelude::Parent)>, bevy::prelude::Query<'n, 'o, &'p bevy::prelude::Window, bevy::prelude::With<PrimaryWindow>>, bevy::prelude::Query<'q, 'r, (&'s bevy::prelude::Camera, &'t bevy::prelude::GlobalTransform), bevy::prelude::With<MainCamera>>) {ground_targeting_reticule_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h mut PendingGroundAoEComponent)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k bevy::prelude::GlobalTransform, &'l mut Health, &'m mut Velocity), bevy::prelude::With<Horror>>) {pending_ground_aoe_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut EruptionVisualComponent, &'g mut bevy::prelude::Sprite)>) {eruption_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut Survivor, &'i mut PlayerDashingComponent), (bevy::prelude::With<Survivor>, bevy::prelude::Without<Horror>)>, bevy::prelude::Query<'j, 'k, (bevy::prelude::Entity, &'l bevy::prelude::GlobalTransform, &'m mut Health, &'n Horror)>) {player_dashing_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, bevy::prelude::Time>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut LobbedBouncingProjectileComponent, &'h mut Velocity, &'i mut Damage, &'j bevy::prelude::Transform, &'k mut Lifetime, &'l mut AutomaticProjectile)>) {lobbed_bouncing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut MagmaPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Res<'l, bevy::prelude::AssetServer>) {magma_pool_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f bevy::prelude::Transform, &'g {type error}, &'h {type error}), {type error}>, bevy::prelude::Res<'i, AutomaticWeaponLibrary>, bevy::prelude::Query<'j, 'k, &'l mut PlayerWaitingTetherActivationComponent>, bevy::prelude::Query<'m, 'n, &'o mut bevy::prelude::Transform, bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, &'r bevy::prelude::Transform, bevy::prelude::With<Survivor>>) {repositioning_tether_firing_system}): bevy::prelude::IntoSystem<(), (), _>`
            which is required by `&(for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h bevy::prelude::Transform, &'i mut Survivor, std::option::Option<&'j mut PlayerOrbControllerComponent>)>, bevy::prelude::Query<'k, 'l, bevy::prelude::Entity, bevy::prelude::With<OrbitingPetComponent>>) {manage_player_orbs_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut OrbitingPetComponent)>, bevy::prelude::Query<'i, 'j, &'k bevy::prelude::Transform, (bevy::prelude::With<Survivor>, bevy::prelude::Without<OrbitingPetComponent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>, bevy::prelude::Query<'o, 'p, &'q mut Health, bevy::prelude::With<Horror>>) {orbiting_pet_behavior_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut PlayerWaitingTetherActivationComponent)>) {weapon_systems::tether_reactivation_window_system}, for<'a, 'b, 'c, 'd, 'e> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, &'d mut weapon_systems::ChargingWeaponComponent>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>) {weapon_systems::charge_weapon_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (&'g mut weapon_systems::TrailSpawningProjectileComponent, &'h bevy::prelude::Transform)>) {weapon_systems::trail_spawning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::FireTrailSegmentComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::fire_trail_segment_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ChainLightningZapEffectComponent)>) {weapon_systems::chain_lightning_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::NovaVisualComponent, &'g mut bevy::prelude::Sprite)>) {weapon_systems::nova_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Res<'f, AutomaticWeaponLibrary>, bevy::prelude::Query<'g, 'h, (bevy::prelude::Entity, &'i bevy::prelude::Transform, &'j Survivor, std::option::Option<&'k weapon_systems::PlayerPersistentAuraComponent>)>, bevy::prelude::Query<'l, 'm, (&'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>) {weapon_systems::manage_persistent_aura_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::DebuffCloudVisualComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>) {weapon_systems::debuff_cloud_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut weapon_systems::ExpandingEnergyBombComponent, &'h mut bevy::prelude::Transform, &'i mut bevy::prelude::Sprite, &'j bevy::prelude::GlobalTransform, std::option::Option<&'k bevy::prelude::Parent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, (bevy::prelude::Entity, &'r bevy::prelude::Transform), bevy::prelude::With<Survivor>>) {weapon_systems::expanding_energy_bomb_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, (&'d mut Velocity, &'e bevy::prelude::GlobalTransform, &'f mut weapon_systems::HomingTargetComponent, &'g Lifetime)>, bevy::prelude::Query<'h, 'i, &'j bevy::prelude::GlobalTransform, bevy::prelude::With<Horror>>) {weapon_systems::homing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ReturningProjectileComponent, &'g mut Velocity, &'h bevy::prelude::Transform)>) {weapon_systems::returning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::ResMut<'d, weapon_systems::ActiveIchorPools>, bevy::prelude::Res<'e, bevy::prelude::Time>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h weapon_systems::LobbedProjectileComponent, &'i bevy::prelude::Transform, &'j mut Lifetime)>) {weapon_systems::lobbed_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::IchorPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (&'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::ResMut<'l, weapon_systems::ActiveIchorPools>) {weapon_systems::ichor_pool_system}, for<'a, 'b, 'c, 'd> fn(bevy::prelude::Query<'a, 'b, (bevy::prelude::Entity, &'c mut Survivor, std::option::Option<&'d weapon_systems::IsChannelingComponent>)>) {weapon_systems::player_is_channeling_effect_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Query<'a, 'b, (&'c bevy::prelude::Transform, &'d Survivor), (bevy::prelude::With<Survivor>, bevy::prelude::Without<weapon_systems::ChanneledBeamComponent>)>, bevy::prelude::Query<'e, 'f, (&'g mut bevy::prelude::Transform, &'h weapon_systems::ChanneledBeamComponent)>) {weapon_systems::channeled_beam_update_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (&'f mut weapon_systems::ChanneledBeamComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::channeled_beam_damage_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, AutomaticWeaponLibrary>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g bevy::prelude::GlobalTransform, &'h Survivor)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k mut bevy::prelude::Transform, &'l GroundTargetReticuleComponent, &'m bevy::prelude::Parent)>, bevy::prelude::Query<'n, 'o, &'p bevy::prelude::Window, bevy::prelude::With<PrimaryWindow>>, bevy::prelude::Query<'q, 'r, (&'s bevy::prelude::Camera, &'t bevy::prelude::GlobalTransform), bevy::prelude::With<MainCamera>>) {ground_targeting_reticule_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h mut PendingGroundAoEComponent)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k bevy::prelude::GlobalTransform, &'l mut Health, &'m mut Velocity), bevy::prelude::With<Horror>>) {pending_ground_aoe_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut EruptionVisualComponent, &'g mut bevy::prelude::Sprite)>) {eruption_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut Survivor, &'i mut PlayerDashingComponent), (bevy::prelude::With<Survivor>, bevy::prelude::Without<Horror>)>, bevy::prelude::Query<'j, 'k, (bevy::prelude::Entity, &'l bevy::prelude::GlobalTransform, &'m mut Health, &'n Horror)>) {player_dashing_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, bevy::prelude::Time>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut LobbedBouncingProjectileComponent, &'h mut Velocity, &'i mut Damage, &'j bevy::prelude::Transform, &'k mut Lifetime, &'l mut AutomaticProjectile)>) {lobbed_bouncing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut MagmaPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Res<'l, bevy::prelude::AssetServer>) {magma_pool_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f bevy::prelude::Transform, &'g {type error}, &'h {type error}), {type error}>, bevy::prelude::Res<'i, AutomaticWeaponLibrary>, bevy::prelude::Query<'j, 'k, &'l mut PlayerWaitingTetherActivationComponent>, bevy::prelude::Query<'m, 'n, &'o mut bevy::prelude::Transform, bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, &'r bevy::prelude::Transform, bevy::prelude::With<Survivor>>) {repositioning_tether_firing_system}): bevy::prelude::IntoSystemConfigs<_>`
            `&(for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h bevy::prelude::Transform, &'i mut Survivor, std::option::Option<&'j mut PlayerOrbControllerComponent>)>, bevy::prelude::Query<'k, 'l, bevy::prelude::Entity, bevy::prelude::With<OrbitingPetComponent>>) {manage_player_orbs_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut OrbitingPetComponent)>, bevy::prelude::Query<'i, 'j, &'k bevy::prelude::Transform, (bevy::prelude::With<Survivor>, bevy::prelude::Without<OrbitingPetComponent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>, bevy::prelude::Query<'o, 'p, &'q mut Health, bevy::prelude::With<Horror>>) {orbiting_pet_behavior_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut PlayerWaitingTetherActivationComponent)>) {weapon_systems::tether_reactivation_window_system}, for<'a, 'b, 'c, 'd, 'e> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, &'d mut weapon_systems::ChargingWeaponComponent>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>) {weapon_systems::charge_weapon_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (&'g mut weapon_systems::TrailSpawningProjectileComponent, &'h bevy::prelude::Transform)>) {weapon_systems::trail_spawning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::FireTrailSegmentComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::fire_trail_segment_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ChainLightningZapEffectComponent)>) {weapon_systems::chain_lightning_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::NovaVisualComponent, &'g mut bevy::prelude::Sprite)>) {weapon_systems::nova_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Res<'f, AutomaticWeaponLibrary>, bevy::prelude::Query<'g, 'h, (bevy::prelude::Entity, &'i bevy::prelude::Transform, &'j Survivor, std::option::Option<&'k weapon_systems::PlayerPersistentAuraComponent>)>, bevy::prelude::Query<'l, 'm, (&'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>) {weapon_systems::manage_persistent_aura_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::DebuffCloudVisualComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>) {weapon_systems::debuff_cloud_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut weapon_systems::ExpandingEnergyBombComponent, &'h mut bevy::prelude::Transform, &'i mut bevy::prelude::Sprite, &'j bevy::prelude::GlobalTransform, std::option::Option<&'k bevy::prelude::Parent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, (bevy::prelude::Entity, &'r bevy::prelude::Transform), bevy::prelude::With<Survivor>>) {weapon_systems::expanding_energy_bomb_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, (&'d mut Velocity, &'e bevy::prelude::GlobalTransform, &'f mut weapon_systems::HomingTargetComponent, &'g Lifetime)>, bevy::prelude::Query<'h, 'i, &'j bevy::prelude::GlobalTransform, bevy::prelude::With<Horror>>) {weapon_systems::homing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ReturningProjectileComponent, &'g mut Velocity, &'h bevy::prelude::Transform)>) {weapon_systems::returning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::ResMut<'d, weapon_systems::ActiveIchorPools>, bevy::prelude::Res<'e, bevy::prelude::Time>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h weapon_systems::LobbedProjectileComponent, &'i bevy::prelude::Transform, &'j mut Lifetime)>) {weapon_systems::lobbed_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::IchorPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (&'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::ResMut<'l, weapon_systems::ActiveIchorPools>) {weapon_systems::ichor_pool_system}, for<'a, 'b, 'c, 'd> fn(bevy::prelude::Query<'a, 'b, (bevy::prelude::Entity, &'c mut Survivor, std::option::Option<&'d weapon_systems::IsChannelingComponent>)>) {weapon_systems::player_is_channeling_effect_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Query<'a, 'b, (&'c bevy::prelude::Transform, &'d Survivor), (bevy::prelude::With<Survivor>, bevy::prelude::Without<weapon_systems::ChanneledBeamComponent>)>, bevy::prelude::Query<'e, 'f, (&'g mut bevy::prelude::Transform, &'h weapon_systems::ChanneledBeamComponent)>) {weapon_systems::channeled_beam_update_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (&'f mut weapon_systems::ChanneledBeamComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::channeled_beam_damage_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, AutomaticWeaponLibrary>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g bevy::prelude::GlobalTransform, &'h Survivor)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k mut bevy::prelude::Transform, &'l GroundTargetReticuleComponent, &'m bevy::prelude::Parent)>, bevy::prelude::Query<'n, 'o, &'p bevy::prelude::Window, bevy::prelude::With<PrimaryWindow>>, bevy::prelude::Query<'q, 'r, (&'s bevy::prelude::Camera, &'t bevy::prelude::GlobalTransform), bevy::prelude::With<MainCamera>>) {ground_targeting_reticule_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h mut PendingGroundAoEComponent)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k bevy::prelude::GlobalTransform, &'l mut Health, &'m mut Velocity), bevy::prelude::With<Horror>>) {pending_ground_aoe_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut EruptionVisualComponent, &'g mut bevy::prelude::Sprite)>) {eruption_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut Survivor, &'i mut PlayerDashingComponent), (bevy::prelude::With<Survivor>, bevy::prelude::Without<Horror>)>, bevy::prelude::Query<'j, 'k, (bevy::prelude::Entity, &'l bevy::prelude::GlobalTransform, &'m mut Health, &'n Horror)>) {player_dashing_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, bevy::prelude::Time>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut LobbedBouncingProjectileComponent, &'h mut Velocity, &'i mut Damage, &'j bevy::prelude::Transform, &'k mut Lifetime, &'l mut AutomaticProjectile)>) {lobbed_bouncing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut MagmaPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Res<'l, bevy::prelude::AssetServer>) {magma_pool_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f bevy::prelude::Transform, &'g {type error}, &'h {type error}), {type error}>, bevy::prelude::Res<'i, AutomaticWeaponLibrary>, bevy::prelude::Query<'j, 'k, &'l mut PlayerWaitingTetherActivationComponent>, bevy::prelude::Query<'m, 'n, &'o mut bevy::prelude::Transform, bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, &'r bevy::prelude::Transform, bevy::prelude::With<Survivor>>) {repositioning_tether_firing_system}): SystemSet`
            which is required by `&(for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h bevy::prelude::Transform, &'i mut Survivor, std::option::Option<&'j mut PlayerOrbControllerComponent>)>, bevy::prelude::Query<'k, 'l, bevy::prelude::Entity, bevy::prelude::With<OrbitingPetComponent>>) {manage_player_orbs_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut OrbitingPetComponent)>, bevy::prelude::Query<'i, 'j, &'k bevy::prelude::Transform, (bevy::prelude::With<Survivor>, bevy::prelude::Without<OrbitingPetComponent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>, bevy::prelude::Query<'o, 'p, &'q mut Health, bevy::prelude::With<Horror>>) {orbiting_pet_behavior_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut PlayerWaitingTetherActivationComponent)>) {weapon_systems::tether_reactivation_window_system}, for<'a, 'b, 'c, 'd, 'e> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, &'d mut weapon_systems::ChargingWeaponComponent>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>) {weapon_systems::charge_weapon_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (&'g mut weapon_systems::TrailSpawningProjectileComponent, &'h bevy::prelude::Transform)>) {weapon_systems::trail_spawning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::FireTrailSegmentComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::fire_trail_segment_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ChainLightningZapEffectComponent)>) {weapon_systems::chain_lightning_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::NovaVisualComponent, &'g mut bevy::prelude::Sprite)>) {weapon_systems::nova_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Res<'f, AutomaticWeaponLibrary>, bevy::prelude::Query<'g, 'h, (bevy::prelude::Entity, &'i bevy::prelude::Transform, &'j Survivor, std::option::Option<&'k weapon_systems::PlayerPersistentAuraComponent>)>, bevy::prelude::Query<'l, 'm, (&'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>) {weapon_systems::manage_persistent_aura_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::DebuffCloudVisualComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>) {weapon_systems::debuff_cloud_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut weapon_systems::ExpandingEnergyBombComponent, &'h mut bevy::prelude::Transform, &'i mut bevy::prelude::Sprite, &'j bevy::prelude::GlobalTransform, std::option::Option<&'k bevy::prelude::Parent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, (bevy::prelude::Entity, &'r bevy::prelude::Transform), bevy::prelude::With<Survivor>>) {weapon_systems::expanding_energy_bomb_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, (&'d mut Velocity, &'e bevy::prelude::GlobalTransform, &'f mut weapon_systems::HomingTargetComponent, &'g Lifetime)>, bevy::prelude::Query<'h, 'i, &'j bevy::prelude::GlobalTransform, bevy::prelude::With<Horror>>) {weapon_systems::homing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ReturningProjectileComponent, &'g mut Velocity, &'h bevy::prelude::Transform)>) {weapon_systems::returning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::ResMut<'d, weapon_systems::ActiveIchorPools>, bevy::prelude::Res<'e, bevy::prelude::Time>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h weapon_systems::LobbedProjectileComponent, &'i bevy::prelude::Transform, &'j mut Lifetime)>) {weapon_systems::lobbed_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::IchorPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (&'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::ResMut<'l, weapon_systems::ActiveIchorPools>) {weapon_systems::ichor_pool_system}, for<'a, 'b, 'c, 'd> fn(bevy::prelude::Query<'a, 'b, (bevy::prelude::Entity, &'c mut Survivor, std::option::Option<&'d weapon_systems::IsChannelingComponent>)>) {weapon_systems::player_is_channeling_effect_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Query<'a, 'b, (&'c bevy::prelude::Transform, &'d Survivor), (bevy::prelude::With<Survivor>, bevy::prelude::Without<weapon_systems::ChanneledBeamComponent>)>, bevy::prelude::Query<'e, 'f, (&'g mut bevy::prelude::Transform, &'h weapon_systems::ChanneledBeamComponent)>) {weapon_systems::channeled_beam_update_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (&'f mut weapon_systems::ChanneledBeamComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::channeled_beam_damage_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, AutomaticWeaponLibrary>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g bevy::prelude::GlobalTransform, &'h Survivor)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k mut bevy::prelude::Transform, &'l GroundTargetReticuleComponent, &'m bevy::prelude::Parent)>, bevy::prelude::Query<'n, 'o, &'p bevy::prelude::Window, bevy::prelude::With<PrimaryWindow>>, bevy::prelude::Query<'q, 'r, (&'s bevy::prelude::Camera, &'t bevy::prelude::GlobalTransform), bevy::prelude::With<MainCamera>>) {ground_targeting_reticule_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h mut PendingGroundAoEComponent)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k bevy::prelude::GlobalTransform, &'l mut Health, &'m mut Velocity), bevy::prelude::With<Horror>>) {pending_ground_aoe_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut EruptionVisualComponent, &'g mut bevy::prelude::Sprite)>) {eruption_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut Survivor, &'i mut PlayerDashingComponent), (bevy::prelude::With<Survivor>, bevy::prelude::Without<Horror>)>, bevy::prelude::Query<'j, 'k, (bevy::prelude::Entity, &'l bevy::prelude::GlobalTransform, &'m mut Health, &'n Horror)>) {player_dashing_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, bevy::prelude::Time>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut LobbedBouncingProjectileComponent, &'h mut Velocity, &'i mut Damage, &'j bevy::prelude::Transform, &'k mut Lifetime, &'l mut AutomaticProjectile)>) {lobbed_bouncing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut MagmaPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Res<'l, bevy::prelude::AssetServer>) {magma_pool_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f bevy::prelude::Transform, &'g {type error}, &'h {type error}), {type error}>, bevy::prelude::Res<'i, AutomaticWeaponLibrary>, bevy::prelude::Query<'j, 'k, &'l mut PlayerWaitingTetherActivationComponent>, bevy::prelude::Query<'m, 'n, &'o mut bevy::prelude::Transform, bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, &'r bevy::prelude::Transform, bevy::prelude::With<Survivor>>) {repositioning_tether_firing_system}): bevy::prelude::IntoSystemSetConfigs`
            `&mut (for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h bevy::prelude::Transform, &'i mut Survivor, std::option::Option<&'j mut PlayerOrbControllerComponent>)>, bevy::prelude::Query<'k, 'l, bevy::prelude::Entity, bevy::prelude::With<OrbitingPetComponent>>) {manage_player_orbs_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut OrbitingPetComponent)>, bevy::prelude::Query<'i, 'j, &'k bevy::prelude::Transform, (bevy::prelude::With<Survivor>, bevy::prelude::Without<OrbitingPetComponent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>, bevy::prelude::Query<'o, 'p, &'q mut Health, bevy::prelude::With<Horror>>) {orbiting_pet_behavior_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut PlayerWaitingTetherActivationComponent)>) {weapon_systems::tether_reactivation_window_system}, for<'a, 'b, 'c, 'd, 'e> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, &'d mut weapon_systems::ChargingWeaponComponent>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>) {weapon_systems::charge_weapon_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (&'g mut weapon_systems::TrailSpawningProjectileComponent, &'h bevy::prelude::Transform)>) {weapon_systems::trail_spawning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::FireTrailSegmentComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::fire_trail_segment_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ChainLightningZapEffectComponent)>) {weapon_systems::chain_lightning_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::NovaVisualComponent, &'g mut bevy::prelude::Sprite)>) {weapon_systems::nova_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Res<'f, AutomaticWeaponLibrary>, bevy::prelude::Query<'g, 'h, (bevy::prelude::Entity, &'i bevy::prelude::Transform, &'j Survivor, std::option::Option<&'k weapon_systems::PlayerPersistentAuraComponent>)>, bevy::prelude::Query<'l, 'm, (&'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>) {weapon_systems::manage_persistent_aura_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::DebuffCloudVisualComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>) {weapon_systems::debuff_cloud_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut weapon_systems::ExpandingEnergyBombComponent, &'h mut bevy::prelude::Transform, &'i mut bevy::prelude::Sprite, &'j bevy::prelude::GlobalTransform, std::option::Option<&'k bevy::prelude::Parent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, (bevy::prelude::Entity, &'r bevy::prelude::Transform), bevy::prelude::With<Survivor>>) {weapon_systems::expanding_energy_bomb_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, (&'d mut Velocity, &'e bevy::prelude::GlobalTransform, &'f mut weapon_systems::HomingTargetComponent, &'g Lifetime)>, bevy::prelude::Query<'h, 'i, &'j bevy::prelude::GlobalTransform, bevy::prelude::With<Horror>>) {weapon_systems::homing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ReturningProjectileComponent, &'g mut Velocity, &'h bevy::prelude::Transform)>) {weapon_systems::returning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::ResMut<'d, weapon_systems::ActiveIchorPools>, bevy::prelude::Res<'e, bevy::prelude::Time>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h weapon_systems::LobbedProjectileComponent, &'i bevy::prelude::Transform, &'j mut Lifetime)>) {weapon_systems::lobbed_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::IchorPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (&'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::ResMut<'l, weapon_systems::ActiveIchorPools>) {weapon_systems::ichor_pool_system}, for<'a, 'b, 'c, 'd> fn(bevy::prelude::Query<'a, 'b, (bevy::prelude::Entity, &'c mut Survivor, std::option::Option<&'d weapon_systems::IsChannelingComponent>)>) {weapon_systems::player_is_channeling_effect_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Query<'a, 'b, (&'c bevy::prelude::Transform, &'d Survivor), (bevy::prelude::With<Survivor>, bevy::prelude::Without<weapon_systems::ChanneledBeamComponent>)>, bevy::prelude::Query<'e, 'f, (&'g mut bevy::prelude::Transform, &'h weapon_systems::ChanneledBeamComponent)>) {weapon_systems::channeled_beam_update_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (&'f mut weapon_systems::ChanneledBeamComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::channeled_beam_damage_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, AutomaticWeaponLibrary>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g bevy::prelude::GlobalTransform, &'h Survivor)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k mut bevy::prelude::Transform, &'l GroundTargetReticuleComponent, &'m bevy::prelude::Parent)>, bevy::prelude::Query<'n, 'o, &'p bevy::prelude::Window, bevy::prelude::With<PrimaryWindow>>, bevy::prelude::Query<'q, 'r, (&'s bevy::prelude::Camera, &'t bevy::prelude::GlobalTransform), bevy::prelude::With<MainCamera>>) {ground_targeting_reticule_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h mut PendingGroundAoEComponent)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k bevy::prelude::GlobalTransform, &'l mut Health, &'m mut Velocity), bevy::prelude::With<Horror>>) {pending_ground_aoe_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut EruptionVisualComponent, &'g mut bevy::prelude::Sprite)>) {eruption_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut Survivor, &'i mut PlayerDashingComponent), (bevy::prelude::With<Survivor>, bevy::prelude::Without<Horror>)>, bevy::prelude::Query<'j, 'k, (bevy::prelude::Entity, &'l bevy::prelude::GlobalTransform, &'m mut Health, &'n Horror)>) {player_dashing_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, bevy::prelude::Time>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut LobbedBouncingProjectileComponent, &'h mut Velocity, &'i mut Damage, &'j bevy::prelude::Transform, &'k mut Lifetime, &'l mut AutomaticProjectile)>) {lobbed_bouncing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut MagmaPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Res<'l, bevy::prelude::AssetServer>) {magma_pool_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f bevy::prelude::Transform, &'g {type error}, &'h {type error}), {type error}>, bevy::prelude::Res<'i, AutomaticWeaponLibrary>, bevy::prelude::Query<'j, 'k, &'l mut PlayerWaitingTetherActivationComponent>, bevy::prelude::Query<'m, 'n, &'o mut bevy::prelude::Transform, bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, &'r bevy::prelude::Transform, bevy::prelude::With<Survivor>>) {repositioning_tether_firing_system}): bevy::prelude::IntoSystem<(), (), _>`
            which is required by `&mut (for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h bevy::prelude::Transform, &'i mut Survivor, std::option::Option<&'j mut PlayerOrbControllerComponent>)>, bevy::prelude::Query<'k, 'l, bevy::prelude::Entity, bevy::prelude::With<OrbitingPetComponent>>) {manage_player_orbs_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut OrbitingPetComponent)>, bevy::prelude::Query<'i, 'j, &'k bevy::prelude::Transform, (bevy::prelude::With<Survivor>, bevy::prelude::Without<OrbitingPetComponent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>, bevy::prelude::Query<'o, 'p, &'q mut Health, bevy::prelude::With<Horror>>) {orbiting_pet_behavior_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut PlayerWaitingTetherActivationComponent)>) {weapon_systems::tether_reactivation_window_system}, for<'a, 'b, 'c, 'd, 'e> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, &'d mut weapon_systems::ChargingWeaponComponent>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>) {weapon_systems::charge_weapon_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (&'g mut weapon_systems::TrailSpawningProjectileComponent, &'h bevy::prelude::Transform)>) {weapon_systems::trail_spawning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::FireTrailSegmentComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::fire_trail_segment_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ChainLightningZapEffectComponent)>) {weapon_systems::chain_lightning_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::NovaVisualComponent, &'g mut bevy::prelude::Sprite)>) {weapon_systems::nova_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Res<'f, AutomaticWeaponLibrary>, bevy::prelude::Query<'g, 'h, (bevy::prelude::Entity, &'i bevy::prelude::Transform, &'j Survivor, std::option::Option<&'k weapon_systems::PlayerPersistentAuraComponent>)>, bevy::prelude::Query<'l, 'm, (&'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>) {weapon_systems::manage_persistent_aura_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::DebuffCloudVisualComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>) {weapon_systems::debuff_cloud_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut weapon_systems::ExpandingEnergyBombComponent, &'h mut bevy::prelude::Transform, &'i mut bevy::prelude::Sprite, &'j bevy::prelude::GlobalTransform, std::option::Option<&'k bevy::prelude::Parent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, (bevy::prelude::Entity, &'r bevy::prelude::Transform), bevy::prelude::With<Survivor>>) {weapon_systems::expanding_energy_bomb_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, (&'d mut Velocity, &'e bevy::prelude::GlobalTransform, &'f mut weapon_systems::HomingTargetComponent, &'g Lifetime)>, bevy::prelude::Query<'h, 'i, &'j bevy::prelude::GlobalTransform, bevy::prelude::With<Horror>>) {weapon_systems::homing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ReturningProjectileComponent, &'g mut Velocity, &'h bevy::prelude::Transform)>) {weapon_systems::returning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::ResMut<'d, weapon_systems::ActiveIchorPools>, bevy::prelude::Res<'e, bevy::prelude::Time>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h weapon_systems::LobbedProjectileComponent, &'i bevy::prelude::Transform, &'j mut Lifetime)>) {weapon_systems::lobbed_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::IchorPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (&'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::ResMut<'l, weapon_systems::ActiveIchorPools>) {weapon_systems::ichor_pool_system}, for<'a, 'b, 'c, 'd> fn(bevy::prelude::Query<'a, 'b, (bevy::prelude::Entity, &'c mut Survivor, std::option::Option<&'d weapon_systems::IsChannelingComponent>)>) {weapon_systems::player_is_channeling_effect_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Query<'a, 'b, (&'c bevy::prelude::Transform, &'d Survivor), (bevy::prelude::With<Survivor>, bevy::prelude::Without<weapon_systems::ChanneledBeamComponent>)>, bevy::prelude::Query<'e, 'f, (&'g mut bevy::prelude::Transform, &'h weapon_systems::ChanneledBeamComponent)>) {weapon_systems::channeled_beam_update_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (&'f mut weapon_systems::ChanneledBeamComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::channeled_beam_damage_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, AutomaticWeaponLibrary>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g bevy::prelude::GlobalTransform, &'h Survivor)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k mut bevy::prelude::Transform, &'l GroundTargetReticuleComponent, &'m bevy::prelude::Parent)>, bevy::prelude::Query<'n, 'o, &'p bevy::prelude::Window, bevy::prelude::With<PrimaryWindow>>, bevy::prelude::Query<'q, 'r, (&'s bevy::prelude::Camera, &'t bevy::prelude::GlobalTransform), bevy::prelude::With<MainCamera>>) {ground_targeting_reticule_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h mut PendingGroundAoEComponent)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k bevy::prelude::GlobalTransform, &'l mut Health, &'m mut Velocity), bevy::prelude::With<Horror>>) {pending_ground_aoe_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut EruptionVisualComponent, &'g mut bevy::prelude::Sprite)>) {eruption_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut Survivor, &'i mut PlayerDashingComponent), (bevy::prelude::With<Survivor>, bevy::prelude::Without<Horror>)>, bevy::prelude::Query<'j, 'k, (bevy::prelude::Entity, &'l bevy::prelude::GlobalTransform, &'m mut Health, &'n Horror)>) {player_dashing_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, bevy::prelude::Time>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut LobbedBouncingProjectileComponent, &'h mut Velocity, &'i mut Damage, &'j bevy::prelude::Transform, &'k mut Lifetime, &'l mut AutomaticProjectile)>) {lobbed_bouncing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut MagmaPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Res<'l, bevy::prelude::AssetServer>) {magma_pool_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f bevy::prelude::Transform, &'g {type error}, &'h {type error}), {type error}>, bevy::prelude::Res<'i, AutomaticWeaponLibrary>, bevy::prelude::Query<'j, 'k, &'l mut PlayerWaitingTetherActivationComponent>, bevy::prelude::Query<'m, 'n, &'o mut bevy::prelude::Transform, bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, &'r bevy::prelude::Transform, bevy::prelude::With<Survivor>>) {repositioning_tether_firing_system}): bevy::prelude::IntoSystemConfigs<_>`
            `&mut (for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h bevy::prelude::Transform, &'i mut Survivor, std::option::Option<&'j mut PlayerOrbControllerComponent>)>, bevy::prelude::Query<'k, 'l, bevy::prelude::Entity, bevy::prelude::With<OrbitingPetComponent>>) {manage_player_orbs_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut OrbitingPetComponent)>, bevy::prelude::Query<'i, 'j, &'k bevy::prelude::Transform, (bevy::prelude::With<Survivor>, bevy::prelude::Without<OrbitingPetComponent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>, bevy::prelude::Query<'o, 'p, &'q mut Health, bevy::prelude::With<Horror>>) {orbiting_pet_behavior_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut PlayerWaitingTetherActivationComponent)>) {weapon_systems::tether_reactivation_window_system}, for<'a, 'b, 'c, 'd, 'e> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, &'d mut weapon_systems::ChargingWeaponComponent>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>) {weapon_systems::charge_weapon_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (&'g mut weapon_systems::TrailSpawningProjectileComponent, &'h bevy::prelude::Transform)>) {weapon_systems::trail_spawning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::FireTrailSegmentComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::fire_trail_segment_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ChainLightningZapEffectComponent)>) {weapon_systems::chain_lightning_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::NovaVisualComponent, &'g mut bevy::prelude::Sprite)>) {weapon_systems::nova_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Res<'f, AutomaticWeaponLibrary>, bevy::prelude::Query<'g, 'h, (bevy::prelude::Entity, &'i bevy::prelude::Transform, &'j Survivor, std::option::Option<&'k weapon_systems::PlayerPersistentAuraComponent>)>, bevy::prelude::Query<'l, 'm, (&'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>) {weapon_systems::manage_persistent_aura_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::DebuffCloudVisualComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>) {weapon_systems::debuff_cloud_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut weapon_systems::ExpandingEnergyBombComponent, &'h mut bevy::prelude::Transform, &'i mut bevy::prelude::Sprite, &'j bevy::prelude::GlobalTransform, std::option::Option<&'k bevy::prelude::Parent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, (bevy::prelude::Entity, &'r bevy::prelude::Transform), bevy::prelude::With<Survivor>>) {weapon_systems::expanding_energy_bomb_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, (&'d mut Velocity, &'e bevy::prelude::GlobalTransform, &'f mut weapon_systems::HomingTargetComponent, &'g Lifetime)>, bevy::prelude::Query<'h, 'i, &'j bevy::prelude::GlobalTransform, bevy::prelude::With<Horror>>) {weapon_systems::homing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ReturningProjectileComponent, &'g mut Velocity, &'h bevy::prelude::Transform)>) {weapon_systems::returning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::ResMut<'d, weapon_systems::ActiveIchorPools>, bevy::prelude::Res<'e, bevy::prelude::Time>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h weapon_systems::LobbedProjectileComponent, &'i bevy::prelude::Transform, &'j mut Lifetime)>) {weapon_systems::lobbed_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::IchorPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (&'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::ResMut<'l, weapon_systems::ActiveIchorPools>) {weapon_systems::ichor_pool_system}, for<'a, 'b, 'c, 'd> fn(bevy::prelude::Query<'a, 'b, (bevy::prelude::Entity, &'c mut Survivor, std::option::Option<&'d weapon_systems::IsChannelingComponent>)>) {weapon_systems::player_is_channeling_effect_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Query<'a, 'b, (&'c bevy::prelude::Transform, &'d Survivor), (bevy::prelude::With<Survivor>, bevy::prelude::Without<weapon_systems::ChanneledBeamComponent>)>, bevy::prelude::Query<'e, 'f, (&'g mut bevy::prelude::Transform, &'h weapon_systems::ChanneledBeamComponent)>) {weapon_systems::channeled_beam_update_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (&'f mut weapon_systems::ChanneledBeamComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::channeled_beam_damage_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, AutomaticWeaponLibrary>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g bevy::prelude::GlobalTransform, &'h Survivor)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k mut bevy::prelude::Transform, &'l GroundTargetReticuleComponent, &'m bevy::prelude::Parent)>, bevy::prelude::Query<'n, 'o, &'p bevy::prelude::Window, bevy::prelude::With<PrimaryWindow>>, bevy::prelude::Query<'q, 'r, (&'s bevy::prelude::Camera, &'t bevy::prelude::GlobalTransform), bevy::prelude::With<MainCamera>>) {ground_targeting_reticule_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h mut PendingGroundAoEComponent)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k bevy::prelude::GlobalTransform, &'l mut Health, &'m mut Velocity), bevy::prelude::With<Horror>>) {pending_ground_aoe_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut EruptionVisualComponent, &'g mut bevy::prelude::Sprite)>) {eruption_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut Survivor, &'i mut PlayerDashingComponent), (bevy::prelude::With<Survivor>, bevy::prelude::Without<Horror>)>, bevy::prelude::Query<'j, 'k, (bevy::prelude::Entity, &'l bevy::prelude::GlobalTransform, &'m mut Health, &'n Horror)>) {player_dashing_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, bevy::prelude::Time>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut LobbedBouncingProjectileComponent, &'h mut Velocity, &'i mut Damage, &'j bevy::prelude::Transform, &'k mut Lifetime, &'l mut AutomaticProjectile)>) {lobbed_bouncing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut MagmaPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Res<'l, bevy::prelude::AssetServer>) {magma_pool_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f bevy::prelude::Transform, &'g {type error}, &'h {type error}), {type error}>, bevy::prelude::Res<'i, AutomaticWeaponLibrary>, bevy::prelude::Query<'j, 'k, &'l mut PlayerWaitingTetherActivationComponent>, bevy::prelude::Query<'m, 'n, &'o mut bevy::prelude::Transform, bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, &'r bevy::prelude::Transform, bevy::prelude::With<Survivor>>) {repositioning_tether_firing_system}): SystemSet`
            which is required by `&mut (for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h bevy::prelude::Transform, &'i mut Survivor, std::option::Option<&'j mut PlayerOrbControllerComponent>)>, bevy::prelude::Query<'k, 'l, bevy::prelude::Entity, bevy::prelude::With<OrbitingPetComponent>>) {manage_player_orbs_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut OrbitingPetComponent)>, bevy::prelude::Query<'i, 'j, &'k bevy::prelude::Transform, (bevy::prelude::With<Survivor>, bevy::prelude::Without<OrbitingPetComponent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>, bevy::prelude::Query<'o, 'p, &'q mut Health, bevy::prelude::With<Horror>>) {orbiting_pet_behavior_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut PlayerWaitingTetherActivationComponent)>) {weapon_systems::tether_reactivation_window_system}, for<'a, 'b, 'c, 'd, 'e> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, &'d mut weapon_systems::ChargingWeaponComponent>, bevy::prelude::Res<'e, AutomaticWeaponLibrary>) {weapon_systems::charge_weapon_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (&'g mut weapon_systems::TrailSpawningProjectileComponent, &'h bevy::prelude::Transform)>) {weapon_systems::trail_spawning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::FireTrailSegmentComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::fire_trail_segment_system}, for<'a, 'b, 'c, 'd, 'e, 'f> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ChainLightningZapEffectComponent)>) {weapon_systems::chain_lightning_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::NovaVisualComponent, &'g mut bevy::prelude::Sprite)>) {weapon_systems::nova_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Res<'f, AutomaticWeaponLibrary>, bevy::prelude::Query<'g, 'h, (bevy::prelude::Entity, &'i bevy::prelude::Transform, &'j Survivor, std::option::Option<&'k weapon_systems::PlayerPersistentAuraComponent>)>, bevy::prelude::Query<'l, 'm, (&'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>) {weapon_systems::manage_persistent_aura_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::DebuffCloudVisualComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::GlobalTransform), bevy::prelude::With<Horror>>) {weapon_systems::debuff_cloud_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut weapon_systems::ExpandingEnergyBombComponent, &'h mut bevy::prelude::Transform, &'i mut bevy::prelude::Sprite, &'j bevy::prelude::GlobalTransform, std::option::Option<&'k bevy::prelude::Parent>)>, bevy::prelude::Query<'l, 'm, (bevy::prelude::Entity, &'n bevy::prelude::GlobalTransform, &'o mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, (bevy::prelude::Entity, &'r bevy::prelude::Transform), bevy::prelude::With<Survivor>>) {weapon_systems::expanding_energy_bomb_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Res<'a, bevy::prelude::Time>, bevy::prelude::Query<'b, 'c, (&'d mut Velocity, &'e bevy::prelude::GlobalTransform, &'f mut weapon_systems::HomingTargetComponent, &'g Lifetime)>, bevy::prelude::Query<'h, 'i, &'j bevy::prelude::GlobalTransform, bevy::prelude::With<Horror>>) {weapon_systems::homing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::ReturningProjectileComponent, &'g mut Velocity, &'h bevy::prelude::Transform)>) {weapon_systems::returning_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::ResMut<'d, weapon_systems::ActiveIchorPools>, bevy::prelude::Res<'e, bevy::prelude::Time>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h weapon_systems::LobbedProjectileComponent, &'i bevy::prelude::Transform, &'j mut Lifetime)>) {weapon_systems::lobbed_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut weapon_systems::IchorPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (&'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::ResMut<'l, weapon_systems::ActiveIchorPools>) {weapon_systems::ichor_pool_system}, for<'a, 'b, 'c, 'd> fn(bevy::prelude::Query<'a, 'b, (bevy::prelude::Entity, &'c mut Survivor, std::option::Option<&'d weapon_systems::IsChannelingComponent>)>) {weapon_systems::player_is_channeling_effect_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h> fn(bevy::prelude::Query<'a, 'b, (&'c bevy::prelude::Transform, &'d Survivor), (bevy::prelude::With<Survivor>, bevy::prelude::Without<weapon_systems::ChanneledBeamComponent>)>, bevy::prelude::Query<'e, 'f, (&'g mut bevy::prelude::Transform, &'h weapon_systems::ChanneledBeamComponent)>) {weapon_systems::channeled_beam_update_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (&'f mut weapon_systems::ChanneledBeamComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>) {weapon_systems::channeled_beam_damage_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, AutomaticWeaponLibrary>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g bevy::prelude::GlobalTransform, &'h Survivor)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k mut bevy::prelude::Transform, &'l GroundTargetReticuleComponent, &'m bevy::prelude::Parent)>, bevy::prelude::Query<'n, 'o, &'p bevy::prelude::Window, bevy::prelude::With<PrimaryWindow>>, bevy::prelude::Query<'q, 'r, (&'s bevy::prelude::Camera, &'t bevy::prelude::GlobalTransform), bevy::prelude::With<MainCamera>>) {ground_targeting_reticule_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, &'d bevy::prelude::Res<'e, bevy::prelude::AssetServer>, bevy::prelude::Query<'f, 'g, (bevy::prelude::Entity, &'h mut PendingGroundAoEComponent)>, bevy::prelude::Query<'i, 'j, (bevy::prelude::Entity, &'k bevy::prelude::GlobalTransform, &'l mut Health, &'m mut Velocity), bevy::prelude::With<Horror>>) {pending_ground_aoe_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut EruptionVisualComponent, &'g mut bevy::prelude::Sprite)>) {eruption_visual_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Res<'d, bevy::prelude::AssetServer>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut bevy::prelude::Transform, &'h mut Survivor, &'i mut PlayerDashingComponent), (bevy::prelude::With<Survivor>, bevy::prelude::Without<Horror>)>, bevy::prelude::Query<'j, 'k, (bevy::prelude::Entity, &'l bevy::prelude::GlobalTransform, &'m mut Health, &'n Horror)>) {player_dashing_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Res<'d, bevy::prelude::Time>, bevy::prelude::Query<'e, 'f, (bevy::prelude::Entity, &'g mut LobbedBouncingProjectileComponent, &'h mut Velocity, &'i mut Damage, &'j bevy::prelude::Transform, &'k mut Lifetime, &'l mut AutomaticProjectile)>) {lobbed_bouncing_projectile_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::Time>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f mut MagmaPoolComponent, &'g bevy::prelude::GlobalTransform)>, bevy::prelude::Query<'h, 'i, (bevy::prelude::Entity, &'j bevy::prelude::Transform, &'k mut Health), bevy::prelude::With<Horror>>, bevy::prelude::Res<'l, bevy::prelude::AssetServer>) {magma_pool_system}, for<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r> fn(bevy::prelude::Commands<'a, 'b>, bevy::prelude::Res<'c, bevy::prelude::AssetServer>, bevy::prelude::Query<'d, 'e, (bevy::prelude::Entity, &'f bevy::prelude::Transform, &'g {type error}, &'h {type error}), {type error}>, bevy::prelude::Res<'i, AutomaticWeaponLibrary>, bevy::prelude::Query<'j, 'k, &'l mut PlayerWaitingTetherActivationComponent>, bevy::prelude::Query<'m, 'n, &'o mut bevy::prelude::Transform, bevy::prelude::With<Horror>>, bevy::prelude::Query<'p, 'q, &'r bevy::prelude::Transform, bevy::prelude::With<Survivor>>) {repositioning_tether_firing_system}): bevy::prelude::IntoSystemSetConfigs`

error[E0425]: cannot find function, tuple struct or tuple variant `OnUpdate` in this scope
   --> src\weapon_systems.rs:719:22
    |
719 |             ).in_set(OnUpdate(AppState::InGame)));
    |                      ^^^^^^^^ help: a unit struct with a similar name exists: `Update`
    |
   ::: C:\Users\mesco\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bevy_app-0.13.2\src\main_schedule.rs:140:1
    |
140 | pub struct Update;
    | ----------------- similarly named unit struct `Update` defined here

error[E0609]: no field `active_automatic_weapon_id` on type `Mut<'_, Survivor>`
   --> src\weapon_systems.rs:825:50
    |
825 |     if let Some(active_weapon_id) = player_stats.active_automatic_weapon_id {
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `speed`, `experience`, `current_level_xp`, `level`, `aim_direction` ... and 59 others

error[E0308]: mismatched types
   --> src\weapon_systems.rs:837:101
    |
837 | ...) && controller.active_orb_entities.len() < controller.max_orbs_allowed {
    |         ------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `u32`
    |         |
    |         expected because this is `usize`
    |
help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit
    |
837 |             if controller.spawn_cooldown_timer.finished() && controller.active_orb_entities.len() < controller.max_orbs_allowed.try_into().unwrap() {
    |                                                                                                                                ++++++++++++++++++++

error[E0308]: mismatched types
   --> src\weapon_systems.rs:851:59
    |
851 |             if new_controller.active_orb_entities.len() < new_controller.max_orbs_allowed {
    |                ----------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `u32`
    |                |
    |                expected because this is `usize`
    |
help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit
    |
851 |             if new_controller.active_orb_entities.len() < new_controller.max_orbs_allowed.try_into().unwrap() {
    |                                                                                          ++++++++++++++++++++

warning: use of deprecated method `bevy::prelude::Query::<'w, 's, D, F>::get_component`: Please use `get` and select for the exact component based on the structure of the exact query as required.
   --> src\weapon_systems.rs:963:69
    |
963 | ...   if let Ok(target_gtransform) = horror_query.get_component::<GlobalTransform>(target_entity) {
    |                                                   ^^^^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

error[E0061]: this function takes 19 arguments but 17 arguments were supplied
   --> src\weapon_systems.rs:974:33
    |
974 |   ...                   crate::automatic_projectiles::spawn_automatic_projectile(
    |  _______________________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-
975 | | ...                       &mut commands,
976 | | ...                       &asset_server,
977 | | ...                       orb_transform.translation,
    | |                           ------------------------- argument #3 of type `bevy::prelude::Entity` is missing
...   |
988 | | ...                       None, // Lifesteal
989 | | ...                   );
    | |_______________________- argument #19 of type `std::option::Option<BlinkStrikeProjectileParams>` is missing
    |
note: function defined here
   --> src\automatic_projectiles.rs:76:8
    |
76  | pub fn spawn_automatic_projectile(
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
79  |     owner: Entity, // Added owner
    |     -------------
...
99  |     opt_blink_params: Option<crate::items::BlinkStrikeProjectileParams>,
    |     -------------------------------------------------------------------
help: provide the arguments
    |
974 -                                 crate::automatic_projectiles::spawn_automatic_projectile(
975 -                                     &mut commands,
976 -                                     &asset_server,
977 -                                     orb_transform.translation,
978 -                                     direction,
979 -                                     orb_comp.params_snapshot.bolt_damage,
980 -                                     orb_comp.params_snapshot.bolt_speed,
981 -                                     0, // Piercing
982 -                                     AutomaticWeaponId(u32::MAX), // Placeholder ID for pet-fired bolts
983 -                                     bolt_sprite,
984 -                                     bolt_sz,
985 -                                     bolt_col,
986 -                                     bolt_lt,
987 -                                     None, None, None, None, // Bouncing params
988 -                                     None, // Lifesteal
989 -                                 );
974 +                                 crate::automatic_projectiles::spawn_automatic_projectile(&mut commands, &asset_server, /* bevy::prelude::Entity */, orb_transform.translation, direction, orb_comp.params_snapshot.bolt_damage, orb_comp.params_snapshot.bolt_speed, 0, AutomaticWeaponId(u32::MAX), bolt_sprite, bolt_sz, bolt_col, bolt_lt, None, None, None, None, None, /* std::option::Option<BlinkStrikeProjectileParams> */);
    |

error[E0063]: missing fields `blink_params_on_hit` and `owner` in initializer of `AutomaticProjectile`
    --> src\weapon_systems.rs:1033:9
     |
1033 |         crate::automatic_projectiles::AutomaticProjectile { // For collision detection and lifetime
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `blink_params_on_hit` and `owner`

error[E0609]: no field `active_automatic_weapon_id` on type `&Survivor`
    --> src\weapon_systems.rs:1319:50
     |
1319 |     if let Some(active_weapon_id) = player_stats.active_automatic_weapon_id {
     |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
     |
     = note: available fields are: `speed`, `experience`, `current_level_xp`, `level`, `aim_direction` ... and 59 others

error[E0609]: no field `visual_sprite_path` on type `GroundTargetedAoEParams`
    --> src\weapon_systems.rs:1407:51
     |
1407 | ...   let sprite_path = pending_comp.params.visual_sprite_path.unwrap_or("sprites/eruption_effect_placeholder...
     |                                             ^^^^^^^^^^^^^^^^^^ unknown field
     |
help: a field with a similar name exists
     |
1407 -             let sprite_path = pending_comp.params.visual_sprite_path.unwrap_or("sprites/eruption_effect_placeholder.png");
1407 +             let sprite_path = pending_comp.params.reticle_sprite_path.unwrap_or("sprites/eruption_effect_placeholder.png");
     |

error[E0308]: mismatched types
    --> src\weapon_systems.rs:1512:18
     |
1512 |             Some(params.damage_loss_per_bounce_multiplier),
     |             ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found `f32`
     |             |
     |             arguments to this enum variant are incorrect
     |
help: the type constructed contains `f32` due to the type of the argument passed
    --> src\weapon_systems.rs:1512:13
     |
1512 |             Some(params.damage_loss_per_bounce_multiplier),
     |             ^^^^^----------------------------------------^
     |                  |
     |                  this argument influences the type of `Some`
note: tuple variant defined here
    --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359\library\core\src\option.rs:580:5

error[E0061]: this function takes 19 arguments but 16 arguments were supplied
    --> src\weapon_systems.rs:1498:9
     |
1498 |           crate::automatic_projectiles::spawn_automatic_projectile(
     |  _________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-
1499 | |             commands,
1500 | |             asset_server,
1501 | |             player_transform.translation,
     | |             ---------------------------- argument #3 of type `bevy::prelude::Entity` is missing
...    |
1514 | |             None,
1515 | |         );
     | |_________- two arguments of type `std::option::Option<RepositioningTetherParams>` and `std::option::Option<BlinkStrikeProjectileParams>` are missing
     |
note: expected `Option<f32>`, found `Option<u32>`
    --> src\weapon_systems.rs:1511:13
     |
1511 |             Some(params.max_bounces),
     |             ^^^^^^^^^^^^^^^^^^^^^^^^
     = note: expected enum `std::option::Option<f32>`
                found enum `std::option::Option<u32>`
note: function defined here
    --> src\automatic_projectiles.rs:76:8
     |
76   | pub fn spawn_automatic_projectile(
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
79   |     owner: Entity, // Added owner
     |     -------------
...
95   |     opt_lifesteal_percentage: Option<f32>,
     |     -------------------------------------
96   |     // Tether parameter
97   |     opt_tether_params_for_comp: Option<crate::items::RepositioningTetherParams>,
     |     ---------------------------------------------------------------------------
98   |     // Blink Strike parameter
99   |     opt_blink_params: Option<crate::items::BlinkStrikeProjectileParams>,
     |     -------------------------------------------------------------------
help: provide the arguments
     |
1498 -         crate::automatic_projectiles::spawn_automatic_projectile(
1499 -             commands,
1500 -             asset_server,
1501 -             player_transform.translation,
1502 -             current_projectile_aim_direction,
1503 -             params.base_damage,
1504 -             params.projectile_speed,
1505 -             0,
1506 -             weapon_id,
1507 -             params.projectile_sprite_path,
1508 -             params.projectile_size,
1509 -             params.projectile_color,
1510 -             params.projectile_lifetime_secs,
1511 -             Some(params.max_bounces),
1512 -             Some(params.damage_loss_per_bounce_multiplier),
1513 -             Some(params.speed_loss_per_bounce_multiplier),
1514 -             None,
1515 -         );
1498 +         crate::automatic_projectiles::spawn_automatic_projectile(commands, asset_server, /* bevy::prelude::Entity */, player_transform.translation, current_projectile_aim_direction, params.base_damage, params.projectile_speed, 0, weapon_id, params.projectile_sprite_path, params.projectile_size, params.projectile_color, params.projectile_lifetime_secs, Some(params.damage_loss_per_bounce_multiplier), Some(params.speed_loss_per_bounce_multiplier), None, /* std::option::Option<f32> */, /* std::option::Option<RepositioningTetherParams> */, /* std::option::Option<BlinkStrikeProjectileParams> */);
     |

error[E0308]: mismatched types
    --> src\weapon_systems.rs:1573:37
     |
1567 | ...ection = initial_aim_direction;
     |             --------------------- expected due to this value
...
1573 | ...on = Quat::from_rotation_z(angle_offset_degrees.to_radians()) * current_aim_direction.extend(0.0);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec2`, found `Vec3`

error[E0599]: no method named `truncate` found for struct `bevy::prelude::Vec2` in the current scope
    --> src\weapon_systems.rs:1574:59
     |
1574 |             current_aim_direction = current_aim_direction.truncate().normalize_or_zero();
     |                                                           ^^^^^^^^
     |
help: there is a method `trunc` with a similar name
     |
1574 -             current_aim_direction = current_aim_direction.truncate().normalize_or_zero();
1574 +             current_aim_direction = current_aim_direction.trunc().normalize_or_zero();
     |

error[E0063]: missing fields `blink_params_on_hit` and `owner` in initializer of `AutomaticProjectile`
    --> src\weapon_systems.rs:1599:13
     |
1599 |             crate::automatic_projectiles::AutomaticProjectile {
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `blink_params_on_hit` and `owner`

error[E0599]: no variant or associated item named `Paused` found for enum `bevy::prelude::TimerMode` in the current scope
    --> src\weapon_systems.rs:1688:125
     |
1688 | ...ansion_secs, TimerMode::Paused),
     |                            ^^^^^^ variant or associated item not found in `TimerMode`

error[E0609]: no field `active_automatic_weapon_id` on type `&Survivor`
    --> src\weapon_systems.rs:1888:50
     |
1888 |     if let Some(active_weapon_id) = player_stats.active_automatic_weapon_id {
     |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
     |
     = note: available fields are: `speed`, `experience`, `current_level_xp`, `level`, `aim_direction` ... and 59 others

error[E0599]: no method named `get_mut` found for struct `EntityCommands` in the current scope
    --> src\weapon_systems.rs:1961:76
     |
1961 | ...mmands.entity(player_entity).get_mut::<PlayerPersistentAuraComponent>().unwrap();
     |                                 ^^^^^^^ method not found in `EntityCommands<'_>`
     |
help: consider pinning the expression
     |
1961 ~                 let mut pinned = std::pin::pin!(commands.entity(player_entity));
1962 ~                 let mut mutable_aura_comp = pinned.as_mut().get_mut::<PlayerPersistentAuraComponent>().unwrap();
     |

error[E0599]: no variant or associated item named `ChainLightningZap` found for enum `SoundEffect` in the current scope
    --> src\weapon_systems.rs:2124:97
     |
2124 | ...io::SoundEffect::ChainLightningZap));
     |                     ^^^^^^^^^^^^^^^^^ variant or associated item not found in `SoundEffect`
     |
    ::: src\audio.rs:9:1
     |
9    | pub enum SoundEffect {
     | -------------------- variant or associated item `ChainLightningZap` not found for this enum

error[E0063]: missing fields `blink_params_on_hit`, `bounces_left`, `current_speed` and 6 other fields in initializer of `AutomaticProjectile`
    --> src\weapon_systems.rs:2203:9
     |
2203 |         crate::automatic_projectiles::AutomaticProjectile {
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `blink_params_on_hit`, `bounces_left`, `current_speed` and 6 other fields

error[E0560]: struct `AutomaticProjectile` has no field named `already_hit_entities`
    --> src\weapon_systems.rs:2322:13
     |
2322 |             already_hit_entities: Vec::new(),
     |             ^^^^^^^^^^^^^^^^^^^^ `AutomaticProjectile` does not have this field
     |
     = note: available fields are: `owner`, `weapon_id`, `bounces_left`, `damage_on_hit`, `current_speed` ... and 5 others

error[E0277]: cannot add-assign `bevy::prelude::Quat` to `bevy::prelude::Vec3`
    --> src\weapon_systems.rs:2632:42
     |
2632 |             visual_transform.translation += rotated_offset;
     |                                          ^^ no implementation for `bevy::prelude::Vec3 += bevy::prelude::Quat`
     |
     = help: the trait `AddAssign<bevy::prelude::Quat>` is not implemented for `bevy::prelude::Vec3`
     = help: the following other types implement trait `AddAssign<Rhs>`:
               `bevy::prelude::Vec3` implements `AddAssign<f32>`
               `bevy::prelude::Vec3` implements `AddAssign`

error[E0277]: the trait bound `AutomaticWeaponDefinition: GetTypeRegistration` is not satisfied
   --> src\main.rs:52:26
    |
52  |         .register_type::<AutomaticWeaponDefinition>()
    |          -------------   ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `GetTypeRegistration` is not implemented for `AutomaticWeaponDefinition`
    |          |
    |          required by a bound introduced by this call
    |
    = help: the following other types implement trait `GetTypeRegistration`:
              &'static std::path::Path
              &'static str
              ()
              (A, B)
              (A, B, C)
              (A, B, C, D)
              (A, B, C, D, E)
              (A, B, C, D, E, F)
            and 534 others
note: required by a bound in `bevy::prelude::App::register_type`
   --> C:\Users\mesco\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bevy_app-0.13.2\src\app.rs:769:29
    |
769 |     pub fn register_type<T: bevy_reflect::GetTypeRegistration>(&mut self) -> &mut Self {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `App::register_type`

error[E0277]: the trait bound `AutomaticWeaponDefinition: FromReflect` is not satisfied
   --> src\main.rs:53:26
    |
53  |         .register_type::<AutomaticWeaponLibrary>()
    |          -------------   ^^^^^^^^^^^^^^^^^^^^^^ the trait `FromReflect` is not implemented for `AutomaticWeaponDefinition`
    |          |
    |          required by a bound introduced by this call
    |
    = help: the following other types implement trait `FromReflect`:
              &'static std::path::Path
              &'static str
              ()
              (A, B)
              (A, B, C)
              (A, B, C, D)
              (A, B, C, D, E)
              (A, B, C, D, E, F)
            and 503 others
    = note: required for `std::vec::Vec<AutomaticWeaponDefinition>` to implement `FromReflect`
note: required for `AutomaticWeaponLibrary` to implement `GetTypeRegistration`
   --> src\items.rs:584:29
    |
584 | #[derive(Resource, Default, Reflect)]
    |                             ^^^^^^^ unsatisfied trait bound introduced in this `derive` macro
585 | #[reflect(Resource)]
586 | pub struct AutomaticWeaponLibrary {
    |            ^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `bevy::prelude::App::register_type`
   --> C:\Users\mesco\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bevy_app-0.13.2\src\app.rs:769:29
    |
769 |     pub fn register_type<T: bevy_reflect::GetTypeRegistration>(&mut self) -> &mut Self {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `App::register_type`
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AutomaticWeaponDefinition: TypePath` is not satisfied
   --> src\main.rs:53:26
    |
53  |         .register_type::<AutomaticWeaponLibrary>()
    |          -------------   ^^^^^^^^^^^^^^^^^^^^^^ the trait `TypePath` is not implemented for `AutomaticWeaponDefinition`
    |          |
    |          required by a bound introduced by this call
    |
    = help: the following other types implement trait `TypePath`:
              &'static T
              &'static mut T
              ()
              (P0,)
              (P1, P0)
              (P1, P2, P0)
              (P1, P2, P3, P0)
              (P1, P2, P3, P4, P0)
            and 529 others
    = note: required for `std::vec::Vec<AutomaticWeaponDefinition>` to implement `FromReflect`
note: required for `AutomaticWeaponLibrary` to implement `GetTypeRegistration`
   --> src\items.rs:584:29
    |
584 | #[derive(Resource, Default, Reflect)]
    |                             ^^^^^^^ unsatisfied trait bound introduced in this `derive` macro
585 | #[reflect(Resource)]
586 | pub struct AutomaticWeaponLibrary {
    |            ^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `bevy::prelude::App::register_type`
   --> C:\Users\mesco\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bevy_app-0.13.2\src\app.rs:769:29
    |
769 |     pub fn register_type<T: bevy_reflect::GetTypeRegistration>(&mut self) -> &mut Self {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `App::register_type`
    = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `velocity`
    --> src\weapon_systems.rs:1069:13
     |
1069 |         mut velocity,
     |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_velocity`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `damage`
    --> src\weapon_systems.rs:1070:13
     |
1070 |         mut damage,
     |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_damage`

warning: variable does not need to be mutable
    --> src\weapon_systems.rs:1069:9
     |
1069 |         mut velocity,
     |         ----^^^^^^^^
     |         |
     |         help: remove this `mut`
     |
     = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
    --> src\weapon_systems.rs:1070:9
     |
1070 |         mut damage,
     |         ----^^^^^^
     |         |
     |         help: remove this `mut`

warning: variable does not need to be mutable
    --> src\weapon_systems.rs:1073:9
     |
1073 |         mut auto_proj_comp,
     |         ----^^^^^^^^^^^^^^
     |         |
     |         help: remove this `mut`

Some errors have detailed explanations: E0061, E0063, E0119, E0277, E0308, E0412, E0422, E0425, E0428...
For more information about an error, try `rustc --explain E0061`.
warning: `eldritch_hero` (bin "eldritch_hero") generated 7 warnings
error: could not compile `eldritch_hero` (bin "eldritch_hero") due to 169 previous errors; 7 warnings emitted